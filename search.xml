<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[应用笔记]]></title>
      <url>http://yoursite.com/2016/12/01/%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="1-响应式开发"><a href="#1-响应式开发" class="headerlink" title="1.响应式开发"></a>1.响应式开发</h3><p>　　响应式开发：网页可以根据设备的类型、尺寸改变展示对应的效果，保证浏览效果<br>　　<font color="red">一般用all（媒体查询）写，配合媒体特性</font><br>　　PC端样式要写的好。兼容性用js处理，有个respond.js。可做优雅降级不影响使用。
<a id="more"></a></p>
<h4 id="·媒体查询（访问的设备）"><a href="#·媒体查询（访问的设备）" class="headerlink" title="·媒体查询（访问的设备）"></a>·媒体查询（访问的设备）</h4><ul>
<li><font color="red"><strong>all</strong></font>　　   所有媒体</li>
<li>braille  　　 盲文触觉设备</li>
<li>embossed 　　 盲文打印机</li>
<li>print 　　 手持设备</li>
<li>projection  　　 打印预览</li>
<li>screen 　　 彩屏设备（包含手机、平板、电脑）</li>
<li>speech 　　 ‘听觉’类似的媒体类型</li>
<li>tty 　　  不适用像素的设备</li>
<li>tv  　　  电视<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> tv&#123;</div><div class="line">    <span class="selector-tag">div</span>&#123;</div><div class="line">        <span class="attribute">background-color</span>: yellow;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　　在控制台elements-emulate切换设备</p>
<h4 id="·媒体特性-设备的尺寸"><a href="#·媒体特性-设备的尺寸" class="headerlink" title="·媒体特性(设备的尺寸)"></a>·媒体特性(设备的尺寸)</h4><ul>
<li>min-width  　　分辨率宽度<font color="red">大于等于</font>设置值的时候识别</li>
<li>max-width　　    分辨率宽度<font color="red">小于等于</font>设置值的时候识别</li>
<li>orientation:portrait  　　   竖屏</li>
<li>orientation:landscape  　　        横屏</li>
<li>-webkit-min-device-pixel-ratio:2   　　  像素比（一般做图片处理）<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> (min-width:<span class="number">40px</span>)&#123;</div><div class="line">    <span class="selector-tag">div</span>&#123;</div><div class="line">        <span class="attribute">background-color</span>: yellow;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="·关键字"><a href="#·关键字" class="headerlink" title="·关键字"></a>·关键字</h4><p>　　链接媒体与媒体特性</p>
<ul>
<li>and 　　和、与 （连接媒体特性）</li>
<li>not  　　 排除指定媒体类型</li>
<li>only 　　 指定某种特定的媒体类型  (一般支不支持都写上)<br>——很多时候是用来对那些不支持媒体特性但却支持媒体类型的设备<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> tv and (orientation:portrait)&#123;</div><div class="line">    <span class="selector-tag">div</span>&#123;</div><div class="line">        <span class="attribute">background-color</span>: yellow;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="·样式表引入方法"><a href="#·样式表引入方法" class="headerlink" title="·样式表引入方法"></a>·样式表引入方法</h4><ol>
<li><font color="red">外联样式表</font>（写在css里）：media条件成立后就会执行{}里的部分。</li>
<li><p>link标签里写：link里有一个media属性，css样式表要符合media条件后才会执行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span> <span class="attr">media</span>=<span class="string">"all and (min-width:600px)"</span> <span class="attr">title</span>=<span class="string">"no title"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>@import：css样式表引入其他样式表（现在已经不用此方法）</p>
<ul>
<li>@import的引用必须写在样式表最前面</li>
<li>当一个页面被加载的时候（就是被浏览者浏览的时候），link引用的CSS会同时被加载，而@import引用的CSS会等到页面全部被下载完再被加载。所以有时候浏览@import加载CSS的页面时开始会没有样式。   <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import url(index.css) all and (min-width:600px)`</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h4 id="·常规尺寸（可自定义）"><a href="#·常规尺寸（可自定义）" class="headerlink" title="·常规尺寸（可自定义）"></a>·常规尺寸（可自定义）</h4><ul>
<li>@media all and (min-width:1200px){             //大分辨率（PC分辨率、TV）         }       </li>
<li>@media all and (min-width:850px) and (max-width:1199px){             //中等分辨率（PC小分辨率 || pad）         }       </li>
<li>@media all and (min-width:700px) and (max-width:849px){             //pad设备         }       </li>
<li>@media all and (min-width:480px) and (max-width:699px){             //高分辨率手机设备 || 低分辨率平板         }               </li>
<li>@media all and (max-width:479px){             //手机设备         }<br><font color="blue"><strong>tips</strong></font>：<ul>
<li>借助chrome将html调整至对应尺寸，再针对样式进行改变覆盖。（技巧：相同设置的div名称可写一起一同设置）</li>
<li>max-width位数为9是因为媒体特性都是含等于的</li>
</ul>
</li>
</ul>
<h3 id="2-弹性盒模型"><a href="#2-弹性盒模型" class="headerlink" title="2.弹性盒模型"></a>2.弹性盒模型</h3><p>　　目前国内很多浏览器不支持，兼容性不好，但以后国内浏览器会更成熟<br>　　不需要设置box-sizing与浮动</p>
<h4 id="·flex父级的设置"><a href="#·flex父级的设置" class="headerlink" title="·flex父级的设置"></a>·flex父级的设置</h4><ol>
<li>display:flex      (display:box的进化版)</li>
<li>flex-direction <font color="blue">设置主轴方向</font>     （<font color="red"><strong>row为x轴、colum为y轴</strong></font>，设置x为主轴y就为副轴）<ul>
<li>row  从左向右排列(默认值)——主轴为x轴</li>
<li>row-reverse 从右向左排列</li>
<li>column 从上往下排列 ——主轴为y轴</li>
<li>column-reverse 从下往上排列</li>
</ul>
</li>
<li>justify-content <font color="blue">主轴对齐</font><ul>
<li>flex-start (默认) 元素在开始位置 富裕(空白)空间占据另一侧</li>
<li>flex-end 富裕(空白)空间在开始位置 元素占据另一侧</li>
<li>center 元素居中 富裕(空白)空间 平分左右两侧</li>
<li>space-between 富裕(空白)空间在元素之间平均分配</li>
<li>space-around  富裕(空白)空间在元素两侧平均分配</li>
</ul>
</li>
<li>align-items    <font color="blue">侧轴对齐</font><ul>
<li>flex-start (默认) 元素在开始位置 富裕空间占据另一侧</li>
<li>flex-end 富裕空间在开始位置 元素占据另一侧</li>
<li>center 元素居中 富裕空间 平分左右两侧</li>
</ul>
</li>
<li>flex-wrap <font color="blue">换行</font><ul>
<li>nowrap (默认)</li>
<li>wrap 换行</li>
<li>wrap-reverse 反向换行</li>
</ul>
</li>
<li>align-content 堆栈伸缩行    （<font color="blue">处理换行元素中接的空隙</font>）<ul>
<li>align-content 会更改 flex-wrap 的行为。它和 align-items 相似，但是,不是对齐伸缩项目，它对齐的是伸缩行。</li>
<li>flex-start (默认) 元素在开始位置 富裕空间占据另一侧</li>
<li>flex-end 富裕空间在开始位置 元素占据另一侧</li>
<li>center 元素居中 富裕空间 平分左右两侧</li>
<li>space-between 富裕空间在元素之间平均分配</li>
<li>space-around  富裕空间在元素两侧平均分配</li>
</ul>
</li>
<li>flex-flow(不太用)<ul>
<li>flex-flow 是 flex-direction 和 flex-wrap 的缩写</li>
<li>flex-flow: [flex-direction] [flex-wrap]</li>
</ul>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: row;</div><div class="line">  <span class="attribute">justify-content</span>: flex-start;</div><div class="line">  <span class="attribute">align-items</span>:center;</div><div class="line">  <span class="attribute">flex-wrap</span>:nowrap;</div><div class="line">  <span class="attribute">align-content</span>:flex-end;</div><div class="line">  <span class="attribute">flex-flow</span>:row nowrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="·flex子元素相关属性"><a href="#·flex子元素相关属性" class="headerlink" title="·flex子元素相关属性"></a>·flex子元素相关属性</h4><ol>
<li>order 　　显示顺序<ul>
<li>数字越大，显示越靠后</li>
<li>支持负数</li>
</ul>
</li>
<li>flex 　　伸缩性(通过设定的值展示它在容器中展示大小的比例)<ul>
<li>flex: auto</li>
<li>flex: none</li>
</ul>
</li>
<li>align-self 　　子元素<font color="blue">侧轴</font>对齐<ul>
<li>flex-start (默认) 元素在开始位置 富裕空间占据另一侧</li>
<li>flex-end 富裕空间在开始位置 元素占据另一侧</li>
<li>center 元素居中 富裕空间 平分左右两侧</li>
</ul>
</li>
<li>margin:auto; 　　x轴y轴都自动居中</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;</div><div class="line">  <span class="attribute">order</span>: <span class="number">2</span>;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">4</span>;</div><div class="line">  <span class="attribute">align-self</span>: flex-end;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;</div><div class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">6</span>;</div><div class="line">  <span class="attribute">align-self</span>: flex-start;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> <span class="selector-class">.one</span>&#123;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-Bootstrap"><a href="#3-Bootstrap" class="headerlink" title="3.Bootstrap"></a>3.Bootstrap</h3><p>　　用于响应式布局、也可以支持移动设备</p>
<h4 id="·栅格系统"><a href="#·栅格系统" class="headerlink" title="·栅格系统"></a>·栅格系统</h4><p>有一套尺寸的规范,尺寸可以复用</p>
<ol>
<li><a href="http://v3.bootcss.com/" target="_blank" rel="external">bootstrap中文网</a></li>
<li>全局 CSS 样式 查看相关用法</li>
<li>下载Bootstrap，不改源码下载用于生产环境的，需要改源码下载Bootstrap源码。</li>
<li>theme.css是模板样式，可以更改对应的按钮、组件的外观<br>.map是记录版本号、路径</li>
<li>不符合项目需求的需要更改源码（注释掉原文件相对应条件）</li>
<li>.container 类用于 <strong>固定宽度</strong> 并支持响应式布局的容器。<br>.container-fluid 类用于 100% 宽度， <strong>占据全部视口</strong> （viewport）的容器。</li>
<li>Bootstrap会在container里开头与结尾处插入before与after节点，记得覆盖掉</li>
</ol>
<h3 id="4-自定义字体-一般用于小图标"><a href="#4-自定义字体-一般用于小图标" class="headerlink" title="4.自定义字体(一般用于小图标)"></a>4.自定义字体(一般用于小图标)</h3><ol>
<li>在ai里画矢量图，再通过文字转换的软件转换成文字（Fontlab：制作图形文字编辑器 ）</li>
<li>把自定义字体文件放在项目的服务器上，用户访问时会从服务器拉取字体文件进行页面的渲染</li>
<li>在线字体转换web所用格式：<a href="http://www.fontsquirrel.com/fontface/generator" target="_blank" rel="external">http://www.fontsquirrel.com/fontface/generator</a></li>
<li>bootstrap中的自定义字体<ul>
<li>bootstrap-组件—图形文字（只需引入对应的两个class就可以引用对应图标）</li>
<li>bootstrap.css中找@font-face，src为自定义字体引入方式</li>
<li>fonts有5个字体文件的原因：由于浏览器众多，各浏览器支持的字体格式是不一样的，所以为了保证各浏览器兼容就需要把每一种字体格式都生成出来并引用。</li>
<li>以下为bootstrap中的引用方式，可复制用法，font-family为可自定义名称。<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@font-face &#123;</div><div class="line">  font-family: 'Glyphicons Halflings';    //其他地方使用可自定义名称</div><div class="line"></div><div class="line">  src: url('../fonts/glyphicons-halflings-regular.eot');</div><div class="line">  src: url('../fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'), url('../fonts/glyphicons-halflings-regular.woff2') format('woff2'), url('../fonts/glyphicons-halflings-regular.woff') format('woff'), url('../fonts/glyphicons-halflings-regular.ttf') format('truetype'), url('../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular') format('svg');</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h3 id="5-H5-forms"><a href="#5-H5-forms" class="headerlink" title="5.H5-forms"></a>5.H5-forms</h3><h4 id="新的输入型控件"><a href="#新的输入型控件" class="headerlink" title="新的输入型控件"></a>新的输入型控件</h4><ul>
<li>email  :  电子邮箱文本框，跟普通的没什么区别<ul>
<li>当输入不是邮箱的时候，验证通不过</li>
<li>移动端的键盘会有变化（切换到全键盘）</li>
</ul>
</li>
<li>tel   :   电话号码<ul>
<li>不会有验证，会变成数字键盘</li>
</ul>
</li>
<li>url   :   网页的URL（必须有网络协议）        <ul>
<li>http://  &amp;  https：//   是网址   ，  与地址（www.baidu.com）有区别</li>
</ul>
</li>
<li>search  :  搜索引擎<ul>
<li>chrome下输入文字后，会多出一个关闭的X</li>
</ul>
</li>
<li><p>range  :  特定范围内的数值选择器</p>
<ul>
<li>min、max、step( 步数 )<pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"10"</span> <span class="attr">step</span>=<span class="string">"2"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
</li>
<li><p>number  :  只能包含数字的输入框（注：包含e）</p>
</li>
<li>color  :  颜色选择器</li>
<li>datetime-local  :  显示完整日期，不含时区</li>
<li>time  :  显示时间，不含时区</li>
<li>date  :  显示日期</li>
<li>week  :  显示周</li>
<li>month  :  显示月</li>
</ul>
<h4 id="新的表单特性和函数"><a href="#新的表单特性和函数" class="headerlink" title="新的表单特性和函数"></a>新的表单特性和函数</h4><ul>
<li>placeholder  :  输入框提示信息（输入内容时提示消失）</li>
<li><p>autocomplete  :  是否保存用户输入值(联想字)on/off</p>
<pre><code>例：autocomplete=&quot;off&quot;
</code></pre></li>
<li><p>默认为on，关闭提示选择off</p>
</li>
<li>autofocus  :  指定表单获取输入焦点       （刷新页面后自动获取焦点）</li>
<li><p>list和datalist  :  为输入框构造一个选择列表（list值为datalist标签的id）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 类似select --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 以下为list和datalist用法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">list</span>=<span class="string">"valList"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"valList"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"javascript"</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"html"</span>&gt;</span>html<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"css"</span>&gt;</span>css<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>required  :  此项必填，不能为空</p>
</li>
<li>Pattern : 正则验证  pattern=”\d{1,5}“</li>
<li><p>Formaction 在submit里定义提交地址</p>
<pre><code>例：&lt;input type=&quot;submit&quot; value=&quot;保存&quot; formaction=&quot;http://www.baidu.com&quot; /&gt;
</code></pre><h3 id="6-photoshop"><a href="#6-photoshop" class="headerlink" title="6.photoshop"></a>6.photoshop</h3></li>
<li>单位：信息—如果width、height出现小数点就点击右上角——面板选项——鼠标坐标改为像素</li>
<li>抠图小的图片保存为GIF（储存字节小），<font color="red">GIF与PNG-24</font>都比较常用</li>
<li>前景色填充已选区域：<font color="red">alt+delet</font></li>
<li>背景色填充已选区域：<font color="red">ctrl+delet</font></li>
<li>取消选择区域：<font color="red">ctrl+d</font></li>
<li>自由变换：已选区域后按<font color="red">ctrl+t</font></li>
<li>工具栏隐藏&amp;显示：<font color="red">tab</font></li>
<li>选中图层：<font color="red">ctrl+鼠标</font></li>
</ul>
<h3 id="7-canvas-定义在浏览器的画布"><a href="#7-canvas-定义在浏览器的画布" class="headerlink" title="7.canvas:定义在浏览器的画布"></a>7.canvas:定义在浏览器的画布</h3><ul>
<li>HTML5中canvas画布在不指定宽高时，默认为宽300，高150；</li>
<li>建议设置canvas宽高采用 <code>&lt;canvas id=&quot;canvas&quot; width=&quot;1024&quot; height=&quot;768&quot;/&gt;</code>方式,因为CSS方式设置的宽高，默认为画布显示的大小<ul>
<li>canvas包括内里显示图画分辨率的大小所以用内嵌方式写，且不用写单位</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvs'</span>)</div><div class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>)           <span class="comment">//用getContext的方法获得绘图的上下文环境</span></div><div class="line"><span class="comment">//使用context进行绘制</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="1-解决浏览器对canvas的兼容问题"><a href="#1-解决浏览器对canvas的兼容问题" class="headerlink" title="1.解决浏览器对canvas的兼容问题"></a>1.解决浏览器对canvas的兼容问题</h4><ul>
<li><p>方式1：在canvas中加入提示语，在浏览器不支持时，提示语才显示，如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"1024"</span> <span class="attr">height</span>=<span class="string">"768"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #aaa;display: block;margin: 50px auto"</span>&gt;</span></div><div class="line">  当浏览器不支持canvas，请更新浏览器后再试</div><div class="line">  <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>方式2：在JavaScript中加入以下语句　</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(canvas.getContext(<span class="string">"2d"</span>))&#123;</div><div class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  alert(<span class="string">"当浏览器不支持canvas，请更新浏览器后再试"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2-JavaScript操作画布"><a href="#2-JavaScript操作画布" class="headerlink" title="2.JavaScript操作画布"></a>2.JavaScript操作画布</h4><p>context.canvas：cantext有个canvas的方法，此方法可以找到上下文绘图环境对应的画布，从而调用画布的其余属性
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);  </div><div class="line"></div><div class="line">	canvas.width = <span class="number">1024</span>;    <span class="comment">//设置canvas大小</span></div><div class="line">	canvas.height=<span class="number">768</span>;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>)    <span class="comment">//获得绘图的上下文环境，提供了绘制接口</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="3-绘制直线、多边型和七巧板"><a href="#3-绘制直线、多边型和七巧板" class="headerlink" title="3.绘制直线、多边型和七巧板"></a>3.绘制直线、多边型和七巧板</h4><p>canvas基于状态绘图：先设置绘图的状态，再调用函数进行具体绘制   </p>
<h5 id="Draw-a-line"><a href="#Draw-a-line" class="headerlink" title="Draw a line"></a>Draw a line</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">设置绘图状态</div><div class="line">context.beginPath();             <span class="comment">//开始绘制</span></div><div class="line">context.moveTo(<span class="number">100</span>,<span class="number">100</span>);        <span class="comment">//笔尖放在坐标100，100的位置</span></div><div class="line">context.lineTo(<span class="number">700</span>,<span class="number">700</span>);          <span class="comment">//设置划线终点</span></div><div class="line">context.lineTo(<span class="number">100</span>,<span class="number">700</span>);  </div><div class="line">context.moveTo(<span class="number">100</span>,<span class="number">100</span>);          (绘制了一个三角形)</div><div class="line">context.closePath();             <span class="comment">//结束绘制</span></div><div class="line"></div><div class="line">context.lineWidth=<span class="number">5</span>;                            <span class="comment">//设置线条宽度</span></div><div class="line">context.strokeStyle = <span class="string">"#005588"</span>;         <span class="comment">//设置线条样式，主要用于设置颜色</span></div><div class="line">context.fillStyle = <span class="string">"rgb(2,100,300)"</span>;      <span class="comment">//定义填充颜色</span></div><div class="line"></div><div class="line">具体绘制</div><div class="line">context.stroke();                  <span class="comment">//绘制线条</span></div><div class="line">context.fill();            <span class="comment">//绘制填充的颜色块</span></div></pre></td></tr></table></figure>
<blockquote>
<p>例子：七巧板</p>
</blockquote>
<h5 id="绘制弧、圆"><a href="#绘制弧、圆" class="headerlink" title="绘制弧、圆"></a>绘制弧、圆</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context.arc(</div><div class="line">centerx,centery,radius,       <span class="comment">//圆心横坐标、纵坐标、半径</span></div><div class="line">startingAngle,endingAngle,     <span class="comment">//起始弧度值、结束弧度值</span></div><div class="line">anticlockwise=<span class="literal">false</span>           <span class="comment">//绘制方向（默认false顺时针，true为逆时针）</span></div><div class="line">)</div></pre></td></tr></table></figure>
<blockquote>
<p>例子：context.arc(300,300,200,0,1.5*<font color="red">Math.PI</font>,true);</p>
</blockquote>
<h5 id="封闭-不封闭"><a href="#封闭-不封闭" class="headerlink" title="封闭/不封闭"></a>封闭/不封闭</h5><ul>
<li>context.closePath();<strong>会让自动让不封闭的图形首尾用直线相连，有fill也可以不写</strong></li>
<li>如果想保持不封闭状态就只写context.beginPath();（可单独使用 ）</li>
<li>用context.fill(); 执行绘画时，context.closePath();将不起作用，写不写都将封闭<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">context.fillStyle=<span class="string">"#005588"</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i ++ )&#123;</div><div class="line">     context.beginPath();</div><div class="line">     context.arc( <span class="number">50</span> + i*<span class="number">100</span> , <span class="number">180</span> , <span class="number">40</span> , <span class="number">0</span> , <span class="number">2</span>*<span class="built_in">Math</span>.PI*(i+<span class="number">1</span>)/<span class="number">10</span>);</div><div class="line"></div><div class="line">     <span class="comment">/*context.closePath();*/</span>          (封闭/不封闭)</div><div class="line">     context.stroke();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>例子：绘制弧线</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动端笔记]]></title>
      <url>http://yoursite.com/2016/12/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
      <content type="html"><![CDATA[<h3 id="1-移动端笔记"><a href="#1-移动端笔记" class="headerlink" title="1.移动端笔记"></a>1.移动端笔记</h3><p>　　移动端指手机、平板;<br>　　应用方法做优雅降级，支持可看到最好效果，不支持也没太大影响</p>
<h4 id="·本地服务器搭建"><a href="#·本地服务器搭建" class="headerlink" title="·本地服务器搭建"></a>·本地服务器搭建</h4><p>　　用Hbuilder打开网页，将127.0.0.1更改为计算机IP地址，处于同一个网络环境下的手机就可以访问此链接。（也可用XAMPP的Apache功能）</p>
<blockquote>
<p>关闭防火墙</p>
</blockquote>
<h4 id="·像素比"><a href="#·像素比" class="headerlink" title="·像素比"></a>·像素比</h4><ul>
<li>点、points：虚拟单位   </li>
<li>像素比：通过像素比可以改变屏幕显示的质量   </li>
<li>渲染像素：点*像素比=分辨率   (栅格系统-栅格化)</li>
<li>PPI：屏幕上每英寸能容纳多少像素（PPI越高设备越清晰）   </li>
<li>物理像素：指的是屏幕实际展示出的像素值   </li>
<li>物理设备：实体设备</li>
<li>获取像素比：window.devicePixelRatio</li>
</ul>
<a id="more"></a>
<h4 id="·viewport（视口）"><a href="#·viewport（视口）" class="headerlink" title="·viewport（视口）"></a>·viewport（视口）</h4><p>　　目的：让项目支持移动端</p>
<ul>
<li>width 设备宽度 [pixel_value | device-width]<ul>
<li>device-width：让页面的宽度与访问设备的宽度一致    </li>
</ul>
</li>
<li>user-scalable 是否允许缩放 （no||yes）<ul>
<li>user-scalable=no：不让用户进行页面缩放</li>
</ul>
</li>
<li>initial-scale 初始比例<ul>
<li>initial-scale=1</li>
</ul>
</li>
<li>minimum-scale 允许缩放的最小比例<ul>
<li>minimum-scale=1：不让用户进行页面缩放</li>
</ul>
</li>
<li>maximum-scale 允许缩放的最大比例</li>
<li>minimum-scale 允许缩放的最小比例<ul>
<li>minimum-scale=1：不让用户进行页面缩放</li>
</ul>
</li>
<li>target-densitydpi (已淘汰)</li>
<li>动态控制比例    1/像素比<ul>
<li>控制像素比让1px做1px的事情:1:1像素还原,尽可能和设备分辨率一致<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取分辨比（设备像素比）</span></div><div class="line"><span class="keyword">var</span> pixelRatio = <span class="number">1</span> / <span class="built_in">window</span>.devicePixelRatio;</div><div class="line"><span class="comment">//通过js动态设置视口(viewport)</span></div><div class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;meta name="viewport" content="width=device-width,initial-scale='</span>+pixelRatio+<span class="string">',minimum-scale='</span>+pixelRatio+<span class="string">',maximum-scale='</span>+pixelRatio+<span class="string">'" /&gt;'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>　　1.如果项目只在微信里运行，可以给meta-content里宽度设定一个固定的值<br>　　2.不要允许用户缩放（会影响布局）<br>　　3.retina屏（Mac）会有像素比问题<br>　　4.js放上面，一开始就要生成视口</p>
<h4 id="·布局步骤"><a href="#·布局步骤" class="headerlink" title="·布局步骤"></a>·布局步骤</h4><ol>
<li>确定尺寸（设计稿） 并且还得在符合该尺寸的模拟器下进行第一次预览（设计稿拿到的尺寸是多大就放到对应设备去模拟 ）</li>
<li>搭建大体框架<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/*顶部div固定不动*/</div><div class="line">html&#123;</div><div class="line">      width:100%;</div><div class="line">      height:100%;</div><div class="line">      overflow:hidden;  //去除html滚动条</div><div class="line">      font-size: 30px;</div><div class="line">    &#125;</div><div class="line">body&#123;</div><div class="line">      margin:0;</div><div class="line">      width:100%;</div><div class="line">      height:100%;</div><div class="line">      overflow:auto;  //将滚动条加给body</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="·布局单位rem"><a href="#·布局单位rem" class="headerlink" title="·布局单位rem"></a>·布局单位rem</h4><ul>
<li><p><strong>px</strong> ——绝对（固定）单位<br>缺点：任何情况下都是固定值，会导致布局在不同尺寸的设备下错位</p>
</li>
<li><p><strong>%</strong>——相对单位（会有影响发生变化），相对于父级（自身）大小进行计算<br>缺点：能确定范围的还是比较好计算的，对于不太好确定值的地方不好使用百分比。并且，会导致变形。</p>
</li>
<li><p><strong>em</strong> ——相对单位（会有影响发生变化），em = 当前字体大小<br>缺点：会根据当前容器字体大小发生变化，假如每个容器字体大小不一致，那么计算会非常麻烦。</p>
</li>
<li><p><strong>rem</strong> ——相对单位（只依赖于html字体大小）[小部分浏览器不支持（可忽略）]<br>r = root节点（根节点，最高权限），em = 字体大小 font size</p>
</li>
</ul>
<h4 id="·动态设置字体大小js布局"><a href="#·动态设置字体大小js布局" class="headerlink" title="·动态设置字体大小js布局"></a>·动态设置字体大小js布局</h4><p>　　目的：尺寸越大，字体大小越大，尺寸越小，字体大小越小。
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取html节点</span></div><div class="line"><span class="keyword">var</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];</div><div class="line"><span class="comment">// 获取屏幕宽度</span></div><div class="line"><span class="keyword">var</span> pageWidth = html.getBoundingClientRect().width;</div><div class="line">（还可以用：<span class="built_in">document</span>.documentElement.clientWidth）</div><div class="line"><span class="comment">// 屏幕宽度 / 固定数值 = 基准值（数值可自定义， 16为黄金比例）</span></div><div class="line">html.style.fontSize = pageWidth / <span class="number">16</span> + <span class="string">"px"</span>;</div></pre></td></tr></table></figure></p>
<h4 id="·代码小总结"><a href="#·代码小总结" class="headerlink" title="·代码小总结"></a>·代码小总结</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> pixelRatio = <span class="number">1</span> / <span class="built_in">window</span>.devicePixelRatio;</div><div class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;meta name="viewport" content="width=device-width,initial-scale='</span>+pixelRatio+<span class="string">',minimum-scale='</span>+pixelRatio+<span class="string">',maximum-scale='</span>+pixelRatio+<span class="string">'" /&gt;'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> pageWidth = html.getBoundingClientRect().width;</div><div class="line">html.style.fontSize = pageWidth / <span class="number">10</span> + <span class="string">"px"</span>;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="·动态设置字体、图片大小"><a href="#·动态设置字体、图片大小" class="headerlink" title="·动态设置字体、图片大小"></a>·动态设置字体、图片大小</h4><h5 id="1-默认样式处理"><a href="#1-默认样式处理" class="headerlink" title="1. 默认样式处理"></a>1. 默认样式处理</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a&#123;</div><div class="line">  -webkit-tap-highlight-color:transparent;     // 取消a标签手指按下时出现的黑色遮罩层</div><div class="line">  text-decoration: none;</div><div class="line">&#125;</div><div class="line">input &#123;-webkit-appearance:none;&#125;     // 解决IOS下表单元素圆角的问题   /*去除input默认样式*/</div></pre></td></tr></table></figure>
<h5 id="2-使用less"><a href="#2-使用less" class="headerlink" title="2. 使用less"></a>2. 使用less</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">  /*less*/</div><div class="line">//变量 定义rem大小，并设置单位（值为html-fontsize的大小）</div><div class="line">@rem:40rem;</div><div class="line"></div><div class="line">div&#123;</div><div class="line">  width: 78/@rem;</div><div class="line">  height:74/@rem;//</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　用less文件注意:<br>　　1.&amp;表示标签自身，写于元素下<br>　　2.@rem  </p>
<h5 id="3-图片尺寸自适应"><a href="#3-图片尺寸自适应" class="headerlink" title="3. 图片尺寸自适应"></a>3. 图片尺寸自适应</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.btn_type&#123;</div><div class="line">  float: left;</div><div class="line">  width: 78/@rem;</div><div class="line">  height:74/@rem;</div><div class="line">  background: url(../img/ico-type.jpg) no-repeat 22/@rem 10/@rem;  //后面是x、y上的位移</div><div class="line">  background-size: 33/@rem 54/@rem;   //处理图片尺寸自适应,必写！！</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>不管使用背景图还是img，<font color="red"> 所有图片都要设置宽高(background-size/height、width)调整对应的size（大小）</font><br>　　-如果图片大小和容器大小一致，那么可以使用100%<br>　　-如果图片大小和容器大小不一样，那么需针对图片分别设置宽/高、x/y   </li>
<li>图片在大屏幕下会失真需要显示高清图，屏幕需要单独处理，需要改变图片路径。   </li>
<li>用雪碧图会有问题，建议用框架做</li>
</ol>
<h4 id="·input兼容问题"><a href="#·input兼容问题" class="headerlink" title="·input兼容问题"></a>·input兼容问题</h4><ol>
<li>固定定位（fixed）元素中有input元素的话，input元素获取焦点（触发键盘）后会导致固定定位错位。（兼容问题）<br>　　解决办法：可用绝对定位、点击input跳转到新页面、不用input写等   </li>
<li>input里的占位符：placeholder   </li>
<li>input设置初始样式，没有border   </li>
<li>input圆角 border-radius:6px;     6px为弧度区域宽</li>
</ol>
<h4 id="·限制宽度"><a href="#·限制宽度" class="headerlink" title="·限制宽度"></a>·限制宽度</h4><ul>
<li>在移动端添加事件必须用addEventListener事件监听方法</li>
<li>拉伸宽度&amp;横竖屏切换，自动调节</li>
<li>设定屏幕最大宽幅</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">setSize();</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, setSize, <span class="literal">false</span>);</div><div class="line"><span class="comment">// window.addEventListener("orientationchange", setSize, false);  横竖屏切换，作用与上面相同</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSize</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> width = html.getBoundingClientRect().width;</div><div class="line">    <span class="comment">//当宽度大于540的时候最大宽度为540，否则该是多少就多少。</span></div><div class="line">    width = width &gt; <span class="number">540</span> ? <span class="number">540</span> : width;</div><div class="line">    html.style.fontSize = width / <span class="number">16</span> + <span class="string">"px"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="·touch事件"><a href="#·touch事件" class="headerlink" title="·touch事件"></a>·touch事件</h4><ul>
<li>event.preventDefault();　　阻止默认事件</li>
<li>touchstart　　当手指触摸屏幕时触发</li>
<li>touchmove　　当手指在屏幕上滑动时连续触发</li>
<li>touchend　　当手指从屏幕上移开时触发</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</div><div class="line">div.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  event.preventDefault();     <span class="comment">//取消默认时间</span></div><div class="line">  div.style.background-color = <span class="string">'red'</span>;</div><div class="line">&#125;,<span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h4 id="·touch事件对象"><a href="#·touch事件对象" class="headerlink" title="·touch事件对象"></a>·touch事件对象</h4><ul>
<li>touches　　当前屏幕上所有触摸点的列表</li>
<li>targetTouches　　当前对象上所有的触摸点的列表</li>
<li>changedTouches　　涉及当前事件的触摸点的列表(最开始触摸的数量)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</div><div class="line">div.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  event.preventDefault();     <span class="comment">//取消默认时间</span></div><div class="line">  div.style.background-color = <span class="string">'red'</span>;</div><div class="line">  <span class="built_in">console</span>.log(event);</div><div class="line">  <span class="built_in">console</span>.log(event.touches.length);    <span class="comment">//触摸点击数量</span></div><div class="line">  <span class="built_in">console</span>.log(event.targetTouches.length);    <span class="comment">//触摸点击数量</span></div><div class="line">  <span class="built_in">console</span>.log(event.changedTouches.length);   <span class="comment">//第一次触摸的数量</span></div><div class="line">&#125;,<span class="literal">false</span>)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[fullpage.js]]></title>
      <url>http://yoursite.com/2016/11/30/fullpage/</url>
      <content type="html"><![CDATA[<p>jQuery全屏滚动插件:fullPage.js <br>
<a href="http://www.jq22.com/jquery-info1124" target="_blank" rel="external">http://www.jq22.com/jquery-info1124</a></p>
<h3 id="fullPage-js介绍"><a href="#fullPage-js介绍" class="headerlink" title="fullPage.js介绍"></a>fullPage.js介绍</h3><h4 id="1-是一个基于jQuery的插件，它能够很方便、很轻松的制作出全屏网站，主要功能有："><a href="#1-是一个基于jQuery的插件，它能够很方便、很轻松的制作出全屏网站，主要功能有：" class="headerlink" title="1.是一个基于jQuery的插件，它能够很方便、很轻松的制作出全屏网站，主要功能有："></a>1.是一个基于jQuery的插件，它能够很方便、很轻松的制作出全屏网站，主要功能有：</h4><blockquote>
<p>1.支持鼠标滚动 <br>
  2.多个回调函数 <br>
  3.支持手机、平板触屏事件 <br>
  4.支持css3动画 <br>
  5.支持窗口缩放 <br>
  6.窗口缩放时自动调整 <br>
  7.可设置滚动宽度、背景颜色、滚动速度、循环选项、回调、文本对齐方式等</p>
</blockquote>
<a id="more"></a>
<h4 id="2-获取方式："><a href="#2-获取方式：" class="headerlink" title="2.获取方式："></a>2.获取方式：</h4><blockquote>
<p>github主页：<a href="https://github.com/alvarotrigo/fullPage.js" target="_blank" rel="external">https://github.com/alvarotrigo/fullPage.js</a></p>
</blockquote>
<h4 id="3-兼容性及大小、版本"><a href="#3-兼容性及大小、版本" class="headerlink" title="3.兼容性及大小、版本"></a>3.兼容性及大小、版本</h4><blockquote>
<p>支持所有主流浏览器，除IE6、IE7 <br>
  大小:7kb <br>
  最新版本是V2.6.7</p>
</blockquote>
<hr>
<h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><h4 id="1-引入相关文件"><a href="#1-引入相关文件" class="headerlink" title="1.引入相关文件"></a>1.引入相关文件</h4><blockquote>
<p>1.css文件：jquery.fukkPage.css(可以自己写不用引入，其他为重要引入 ) <br>
  2.jquery文件：1.6以上版本即可 <br>
  3.easing文件：jquery.easing.js，支持更多动画过渡效果的插件,可选的，非必须 <br>
  4.fullPage文件：jquery.fullPage.js <br>
  注意： <br>
  1.使用cdn上的文件，而非本地文件，当部署到自己网站时，可以减轻自己服务器的压力，提高用户的访问速度  <br>
  2.<a href="https://cdnjs.com上的fullPage.js版本是最新的" target="_blank" rel="external">https://cdnjs.com上的fullPage.js版本是最新的</a></p>
</blockquote>
<h4 id="2-页面的基本结构"><a href="#2-页面的基本结构" class="headerlink" title="2.页面的基本结构"></a>2.页面的基本结构</h4><blockquote>
<p>每个页面的div都要设置<code>class=&quot;section&quot;</code>
  页面可设置幻灯片，<code>class=&quot; slide&quot;</code>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fullpage"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span>第一屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span>          //每一个session对应一个页面</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span>第二屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第一屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span>   //可以给每个页面加slide幻灯片</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第二屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第三屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第四屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是第四屏<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="3-JavaScript"><a href="#3-JavaScript" class="headerlink" title="3.JavaScript"></a>3.JavaScript</h4><blockquote>
<p>要想激活fullpage效果，需要加入：
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">   $(documnet).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $(<span class="string">'#fullpage'</span>).fullpage();          </div><div class="line">   &#125;);               <span class="comment">//在加载fullpage的时候引入fullpage方法</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><h4 id="sectionsColor"><a href="#sectionsColor" class="headerlink" title="sectionsColor"></a>sectionsColor</h4><blockquote>
<p>可以为每个section设置background-color属性。</p>
</blockquote>
<h4 id="controlArrows："><a href="#controlArrows：" class="headerlink" title="controlArrows："></a>controlArrows：</h4><blockquote>
<p>定义是否通过箭头来控制slide幻灯片，默认为true。当我们设置为false，则幻灯片左右两侧的箭头就会消失，在移动设备上，我们可以通过滑动来操作幻灯片。</p>
</blockquote>
<h4 id="verticalCentered"><a href="#verticalCentered" class="headerlink" title="verticalCentered"></a>verticalCentered</h4><blockquote>
<p>每一页的内容是否垂直居中，默认值为true。一般我们保持默认值。</p>
</blockquote>
<h4 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h4><blockquote>
<p>字体是否随着窗口缩放而缩放，默认值为false。</p>
</blockquote>
<h4 id="scrollingSpeed"><a href="#scrollingSpeed" class="headerlink" title="scrollingSpeed"></a>scrollingSpeed</h4><blockquote>
<p>设置滚动速度，单位为毫秒，默认为700。</p>
</blockquote>
<h4 id="anchors"><a href="#anchors" class="headerlink" title="anchors"></a>anchors</h4><blockquote>
<p>定义锚链接，默认值为[]。有了锚链接，用户就可以快速打开定位到某一页面。 <br>
  注意：定义锚链接的时候，值不要和页面中任意的id或name相同，尤其是在IE浏览器下。而且定义是不需要加<code>#</code>  <br>
  <code>http://localhost:63342/index.html#page1</code> 地址栏上的地址多了<code>#page1</code>，方便用户搜藏链接，然后快速打开</p>
</blockquote>
<h4 id="lockAnchors"><a href="#lockAnchors" class="headerlink" title="lockAnchors"></a>lockAnchors</h4><blockquote>
<p>是否锁定锚链接，默认为false。如果设置为true，那么定义的锚链接，也就是anchors属性则没有效果。这个配置项使用的比较少。</p>
</blockquote>
<h4 id="添加active类，-打开网页直接定位到此页面"><a href="#添加active类，-打开网页直接定位到此页面" class="headerlink" title="添加active类， 打开网页直接定位到此页面"></a>添加active类， 打开网页直接定位到此页面</h4><blockquote>
<p>如：<code>&lt;div class=&quot;slide active&quot;&gt;幻灯片2&lt;/div&gt;</code> <br>
     <code>&lt;div class=&quot;section active&quot;&gt;&lt;h1&gt;这是第3屏&lt;/h1&gt;&lt;/div&gt;</code></p>
</blockquote>
<h4 id="easing"><a href="#easing" class="headerlink" title="easing:"></a>easing:</h4><blockquote>
<p>定义页面section滚动的动画方式，默认为easeInOutCubic，如果修改此项，需要引入jquery。easings插件，或者jquery ui。</p>
</blockquote>
<h4 id="css3"><a href="#css3" class="headerlink" title="css3:"></a>css3:</h4><blockquote>
<p>是否使用css3 transforms来实现滚动效果，默认为true。这个配置项可以提高支持css3的浏览器，比如移动设备等的速度，如果浏览器不支持css3，则会使用jquery来替代css3实现滚动效果。 <br>
 （即优雅降级，使用jquery实现动画，一般来说，它的性能不如css动画来得快。）</p>
</blockquote>
<h4 id="loopTop"><a href="#loopTop" class="headerlink" title="loopTop:"></a>loopTop:</h4><blockquote>
<p>滚动到最顶部后是否连续滚动到底部，默认为false。</p>
</blockquote>
<h4 id="loopBottom："><a href="#loopBottom：" class="headerlink" title="loopBottom："></a>loopBottom：</h4><blockquote>
<p>滚动到最底部后是否连续滚动回顶部，默认为false。</p>
</blockquote>
<h4 id="loopHorizontal："><a href="#loopHorizontal：" class="headerlink" title="loopHorizontal："></a>loopHorizontal：</h4><blockquote>
<p>横向slider幻灯片是否循环滚动，默认为true。 <br>
  （设置为false时，在第一个slider时，没有向左滚动的箭头，不能向左滚动。同理，最后一个slider时，没有向右滚动的箭头，不能向右滚动。）</p>
</blockquote>
<h4 id="autoScrolling："><a href="#autoScrolling：" class="headerlink" title="autoScrolling："></a>autoScrolling：</h4><blockquote>
<p>是否使用插件的滚动方式，默认为true，如果选择false，则会出现浏览器自带的滚动条，将不会按页滚动，而是按照滚动条的默认行为来滚动。</p>
</blockquote>
<h4 id="scrollBar："><a href="#scrollBar：" class="headerlink" title="scrollBar："></a>scrollBar：</h4><blockquote>
<p>是否包含滚动条，默认为false，如果设置为true，则浏览器自带的滚动条出现，页面滚动时还是按页滚动，但是滚动条的默认行为也有效。</p>
</blockquote>
<h4 id="paddingTop-paddingBottom："><a href="#paddingTop-paddingBottom：" class="headerlink" title="paddingTop/paddingBottom："></a>paddingTop/paddingBottom：</h4><blockquote>
<p>设置每一个section顶部和底部的padding，默认都为0.一般如果我们需要设置一个固定在顶部或者底部的菜单、导航、元素等，可以使用这两个配置项。</p>
</blockquote>
<h4 id="fixedElements："><a href="#fixedElements：" class="headerlink" title="fixedElements："></a>fixedElements：</h4><blockquote>
<p>固定的元素，默认为null，需要配置一个jquery选择器。在页面滚动的时候，fixedElements设置的元素固定不动。</p>
</blockquote>
<h4 id="keyboardScrolling："><a href="#keyboardScrolling：" class="headerlink" title="keyboardScrolling："></a>keyboardScrolling：</h4><blockquote>
<p>是否可以使用键盘方向键导航，默认为true。</p>
</blockquote>
<h4 id="touchSensitivity："><a href="#touchSensitivity：" class="headerlink" title="touchSensitivity："></a>touchSensitivity：</h4><blockquote>
<p>在移动设备中滑动页面的敏感性，默认为5，是按百分比来衡量，最高为100，越大则越难滑动。</p>
</blockquote>
<h4 id="continuousVertical"><a href="#continuousVertical" class="headerlink" title="continuousVertical:"></a>continuousVertical:</h4><blockquote>
<p>是否循环滚动，默认为false。如果设置为true，则页面会循环滚动，而不像loopTop或loopBottom那样出现跳动，注意这个属性和loopTop、loopBottom不兼容，不要同时设置。</p>
</blockquote>
<h4 id="animateAnchor："><a href="#animateAnchor：" class="headerlink" title="animateAnchor："></a>animateAnchor：</h4><blockquote>
<p>锚链接是否可以控制滚动动画，默认为true。如果设置为false，则通过锚链接定位到某个页面显示不再有动画效果。</p>
</blockquote>
<h4 id="recordHistory"><a href="#recordHistory" class="headerlink" title="recordHistory:"></a>recordHistory:</h4><blockquote>
<p>是否记录历史，默认为true，可以记录页面滚动的历史，通过浏览器的前进后退来导航。注意如果设置了autoScrolling：false，那么这个配置也将被关闭，即设置为false。</p>
</blockquote>
<h4 id="menu："><a href="#menu：" class="headerlink" title="menu："></a>menu：</h4><blockquote>
<p>绑定菜单，设定的相关属性与anchors的值对应后，菜单可以控制滚动，默认为false。可以设置为菜单的jquery选择器 <br>
  例：
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--ul的ID名'，在这之前要先设置一个 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"fullpageMenu"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-menuanchor</span>=<span class="string">"page1"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#page1"</span>&gt;</span>section1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-menuanchor</span>=<span class="string">"page2"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#page2"</span>&gt;</span>section1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>anchors:[‘page1’,’page2’,’page3’], <br>
  menu:’#funnpageMenu’  <br><br>  ps:data-menuanchor以及href的值都是与锚链接一一对应的     </p>
</blockquote>
<h4 id="navigation"><a href="#navigation" class="headerlink" title="navigation:"></a>navigation:</h4><blockquote>
<p>是否显示导航，默认为false。如果设置为true，会显示小圆点，作为导航。</p>
</blockquote>
<h4 id="navigationPosition："><a href="#navigationPosition：" class="headerlink" title="navigationPosition："></a>navigationPosition：</h4><blockquote>
<p>导航小圆点的位置，可以设置为left或right。 <br>
  navigationTooltips: <br>
  导航小圆点的tooltips设置鼠标经过时显示的名字，默认为[]，注意按照顺序设置。 <br>
  例：
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">navigation:<span class="literal">true</span>,</div><div class="line"><span class="attr">navigationPosition</span>:<span class="string">'right'</span>,</div><div class="line"><span class="attr">navigationTooltips</span>:[<span class="string">'page1'</span>,<span class="string">'page2'</span>,<span class="string">'page3'</span>]</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="showActiveTooltip："><a href="#showActiveTooltip：" class="headerlink" title="showActiveTooltip："></a>showActiveTooltip：</h4><blockquote>
<p>是否显示当前页面的导航的tooltip信息，默认为false</p>
</blockquote>
<h4 id="slidesNavigation："><a href="#slidesNavigation：" class="headerlink" title="slidesNavigation："></a>slidesNavigation：</h4><blockquote>
<p>是否显示横向幻灯片的导航，默认false。</p>
</blockquote>
<h4 id="slidesNavPosition："><a href="#slidesNavPosition：" class="headerlink" title="slidesNavPosition："></a>slidesNavPosition：</h4><blockquote>
<p>横向幻灯片导航的位置，默认为bottom，可以设置为top或bottom</p>
</blockquote>
<h4 id="scrollOverflow："><a href="#scrollOverflow：" class="headerlink" title="scrollOverflow："></a>scrollOverflow：</h4><blockquote>
<p>内容超过满屏后是否显示滚动条，默认为false。如果设置为true，则会显示滚动条，如果要滚动查看内容，还需要jquery.slimscroll插件的配合。slimscroll插件主要用于模拟传统的浏览器滚动条。</p>
</blockquote>
<h4 id="sectionSelector："><a href="#sectionSelector：" class="headerlink" title="sectionSelector："></a>sectionSelector：</h4><blockquote>
<p>section的选择器，默认为.section。</p>
</blockquote>
<h4 id="slideSelector："><a href="#slideSelector：" class="headerlink" title="slideSelector："></a>slideSelector：</h4><blockquote>
<p>slide的选择器，默认为.slide。 <br>
  例：
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">   $(documnet).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     $(<span class="string">'#fullpage'</span>).fullpage(&#123;</div><div class="line">         <span class="attr">sectionsColor</span>:[<span class="string">'#254875'</span>,<span class="string">'#00FF00'</span>,<span class="string">'red'</span>,],</div><div class="line">         <span class="attr">controlArrows</span>:<span class="literal">false</span>,</div><div class="line">         <span class="attr">verticalCentered</span>:<span class="literal">false</span>，</div><div class="line">         anchors:[<span class="string">'page1'</span>,<span class="string">'page2'</span>,<span class="string">'page3'</span>],</div><div class="line">         <span class="attr">paddingTop</span>:<span class="string">'200px'</span>,</div><div class="line">         <span class="attr">fixedElements</span>:<span class="string">'#header'</span></div><div class="line">      &#125;);</div><div class="line">   &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法的使用方式：$.fn.fullpage.xxx()</p>
<h4 id="moveSectionUp"><a href="#moveSectionUp" class="headerlink" title="moveSectionUp():"></a>moveSectionUp():</h4><blockquote>
<p>向上滚动一页</p>
</blockquote>
<h4 id="moveSectionDown"><a href="#moveSectionDown" class="headerlink" title="moveSectionDown():"></a>moveSectionDown():</h4><blockquote>
<p>向下滚动一页</p>
</blockquote>
<h4 id="moveTo-section-slide"><a href="#moveTo-section-slide" class="headerlink" title="moveTo(section,slide):"></a>moveTo(section,slide):</h4><blockquote>
<p>滚动到第几页，第几个幻灯片，注意，页面是1开始，而幻灯片，是从0开始。 <br>
  例：<code>$.fn.fullpage.moveTo(1,0)</code></p>
</blockquote>
<h4 id="slientMoveTo-section-slide"><a href="#slientMoveTo-section-slide" class="headerlink" title="slientMoveTo(section,slide):"></a>slientMoveTo(section,slide):</h4><blockquote>
<p>滚动到第几页，和moveTo一样，但是没有动画效果。</p>
</blockquote>
<h4 id="moveSlideRight"><a href="#moveSlideRight" class="headerlink" title="moveSlideRight():"></a>moveSlideRight():</h4><blockquote>
<p>幻灯片向右滚动</p>
</blockquote>
<h4 id="moveSlideLeft"><a href="#moveSlideLeft" class="headerlink" title="moveSlideLeft():"></a>moveSlideLeft():</h4><blockquote>
<p>幻灯片向左滚动。</p>
</blockquote>
<h4 id="setAutoScrolling-boolean"><a href="#setAutoScrolling-boolean" class="headerlink" title="setAutoScrolling(boolean):"></a>setAutoScrolling(boolean):</h4><blockquote>
<p>动态设置autoScrolling</p>
</blockquote>
<h4 id="setLockAnchors-boolean"><a href="#setLockAnchors-boolean" class="headerlink" title="setLockAnchors(boolean):"></a>setLockAnchors(boolean):</h4><blockquote>
<p>动态设置lockAnchors</p>
</blockquote>
<h4 id="setRecordHistory-boolean"><a href="#setRecordHistory-boolean" class="headerlink" title="setRecordHistory(boolean):"></a>setRecordHistory(boolean):</h4><blockquote>
<p>动态设置recordHistory</p>
</blockquote>
<h4 id="setScrollingSpeed-milliseconds"><a href="#setScrollingSpeed-milliseconds" class="headerlink" title="setScrollingSpeed(milliseconds):"></a>setScrollingSpeed(milliseconds):</h4><blockquote>
<p>动态设置scrollingSpeed</p>
</blockquote>
<h4 id="setAllowScrolling-boolean-directions"><a href="#setAllowScrolling-boolean-directions" class="headerlink" title="setAllowScrolling(boolean,[directions]):"></a>setAllowScrolling(boolean,[directions]):</h4><h4 id="添加或删除鼠标滚轮-滑动控制，"><a href="#添加或删除鼠标滚轮-滑动控制，" class="headerlink" title="添加或删除鼠标滚轮/滑动控制，"></a>添加或删除鼠标滚轮/滑动控制，</h4><blockquote>
<p>第一个参数true为启用，false为禁用，后面的参数为方向，取值包含all,up,down,left,right,可以使用多个，逗号分隔 <br>
  比如我们在做一个有奖问答页面，提问的问题在前面的页面有答案，当滚动到最后一页时，不希望用户在滚动回之前的页面查看答案，就可以使用这样的方法。</p>
</blockquote>
<h4 id="destroy-type"><a href="#destroy-type" class="headerlink" title="destroy(type)"></a>destroy(type)</h4><blockquote>
<p>销毁fullpage特效，type可以不写，或者使用all，不写type，fullpaga给页面添加的样式和html元素还在，如果使用all，则样式、html等全部销毁，页面恢复和不使用fullpage相同的效果。</p>
</blockquote>
<h4 id="reBuild"><a href="#reBuild" class="headerlink" title="reBuild()"></a>reBuild()</h4><blockquote>
<p>重新更新页面和尺寸，用于通过ajax请求后改变了页面结构之后，重建效果。</p>
</blockquote>
<hr>
<h3 id="Lazy-Loading-延迟加载"><a href="#Lazy-Loading-延迟加载" class="headerlink" title="Lazy Loading 延迟加载"></a>Lazy Loading 延迟加载</h3><h4 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h4><blockquote>
<p><code>&lt;img daye-src=&quot;image.png&quot;&gt;</code></p>
</blockquote>
<h4 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h4><blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">data-src</span>=<span class="string">"video.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">data-src</span>=<span class="string">"video.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
</blockquote>
<hr>
<h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><h4 id="afterLoad-anchorLink-index"><a href="#afterLoad-anchorLink-index" class="headerlink" title="afterLoad(anchorLink,index)"></a>afterLoad(anchorLink,index)</h4><blockquote>
<p>滚动到某一section，且滚动结束后，会触发一次此回调函数，函数接受anchorLink和index两个参数，anchorLink是锚链接的名称，index是序号，从1开始计算。
  我们可以根据anchorLink和index参数值的判断，触发相应的事件。</p>
</blockquote>
<h4 id="onLeave-index-nextIndex-direction"><a href="#onLeave-index-nextIndex-direction" class="headerlink" title="onLeave(index,nextIndex,direction)"></a>onLeave(index,nextIndex,direction)</h4><blockquote>
<ul>
<li>在我们离开一个section时，会触发一次此回调函数，接受index、nextIndex和direction 3个参数：<ul>
<li>index是离开的“页面”的序号，从1开始计算；</li>
<li>nextIndex是滚动到的目标“页面”的序号，从1开始计算；</li>
<li>direction判断往上滚动还是往下滚动，值是up或down。</li>
</ul>
</li>
<li>通过return false；可以取消滚动</li>
</ul>
</blockquote>
<h4 id="afterRender"><a href="#afterRender" class="headerlink" title="afterRender()"></a>afterRender()</h4><blockquote>
<p>页面结构生成后的回调函数，或者说页面初始化完成后的回调函数。</p>
</blockquote>
<h4 id="afterResize"><a href="#afterResize" class="headerlink" title="afterResize()"></a>afterResize()</h4><blockquote>
<p>浏览器窗口尺寸改变后的回调函数</p>
</blockquote>
<h4 id="afterSlideLoad-anchorLink-index-slideAnchor-slideIndex"><a href="#afterSlideLoad-anchorLink-index-slideAnchor-slideIndex" class="headerlink" title="afterSlideLoad(anchorLink,index,slideAnchor,slideIndex)"></a>afterSlideLoad(anchorLink,index,slideAnchor,slideIndex)</h4><blockquote>
<p>滚动到某一幻灯片后的回调函数，与afterLoad类似，接受anchorLink、index、slidIndex、direction4个参数。</p>
</blockquote>
<h4 id="onSlideLeave-anchorLink，index，slideIndex，direction，nextSlideIndex"><a href="#onSlideLeave-anchorLink，index，slideIndex，direction，nextSlideIndex" class="headerlink" title="onSlideLeave(anchorLink，index，slideIndex，direction，nextSlideIndex)"></a>onSlideLeave(anchorLink，index，slideIndex，direction，nextSlideIndex)</h4><blockquote>
<p>在我们离开一个slide时，会触发一次此回调函数，与onLeave类似，接收anchorLink、index、slideIndex、direction4个参数</p>
</blockquote>
<hr>
<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><ul>
<li>设计页面</li>
<li>准备文字和图片素材</li>
<li>按照设计实现基本的页面效果</li>
<li>实现动画</li>
</ul>
<p>载入jquery.fullpage.js需要先载入jquery.js文件和jquery.easing.js插件，该fullpage插件的参数众多，可分为几大类。
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.fullPage.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"move.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>set()方法用于设置元素的css属性，他带有两个参数：css属性和属性值。</li>
<li>scale()方法用于放大或压缩元素的大小，按照提供的每一个值，将调用transform的scale方法。</li>
<li>rotate(deg)方法通过提供的数值作为参数来旋转元素。当方法被调用的时候通过附加到元素的transform属性上。</li>
<li>eng()方法用于Move.js代码片段的结束，它标识动画的结束。技术上，该方法触发动画的播放。该方法接受一个可选的callback回掉函数。</li>
</ul>
<p>例：给页面添加动画效果可利用回调函数（另外：要实现某一东西从某一方向飞入，则首先给其设置一个较大的margin，并设置overflow：hidden，使此东西在页面中显示不出来，然后通过回调函数应用move.js的set（‘margin-方向’，‘使此东西在正确位置的margin值’））</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">afterLoad:<span class="function"><span class="keyword">function</span>(<span class="params">link,index</span>)</span>&#123;</div><div class="line">  <span class="keyword">switch</span>(index)&#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">      move(<span class="string">'section1 h1'</span>).scale(<span class="number">1.5</span>).end();</div><div class="line">      move(<span class="string">'section p'</span>).set(<span class="string">'margin -top'</span>,<span class="string">'5%'</span>).end();          <span class="comment">//调用move.js方法实现动画</span></div><div class="line">      <span class="keyword">break</span>；</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">      move(<span class="string">'section2 h1'</span>).scale(<span class="number">0.7</span>).end();</div><div class="line">      move(<span class="string">'section p'</span>).set(<span class="string">'margin-top'</span>,<span class="string">'20%'</span>).end();          <span class="comment">//缩小动画</span></div><div class="line">      <span class="keyword">break</span>；</div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">      move(<span class="string">'section3 h1'</span>).set(<span class="string">'margin-left'</span>,<span class="string">'20%'</span>) .end();</div><div class="line">      move(<span class="string">'section3 p'</span>).set(<span class="string">'margin-left'</span>,<span class="string">'20%'</span>).end();        <span class="comment">//飞入动画</span></div><div class="line">      <span class="keyword">break</span>；</div><div class="line">    <span class="keyword">case</span> <span class="number">4</span>：</div><div class="line">      move(<span class="string">'.section4 img.primary'</span>).rotate(<span class="number">360</span>).end(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        move(<span class="string">'.section4 img.sport'</span>).rotate(<span class="number">360</span>).end(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//利用end（）可接受回调函数的方法实现动画的先后顺序(依次旋转动画 )</span></div><div class="line">          move.(<span class="string">'.section4 img.eition'</span>).rotate(<span class="number">360</span>).end(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            move(<span class="string">'.section4 img.primary'</span>).scale(<span class="number">1.3</span>).end(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">              move(<span class="string">'.section4 img.sport'</span>).scale(<span class="number">1.3</span>).end(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                move.(<span class="string">'.section4 img.eition'</span>).scale(<span class="number">1.3</span>). end();</div><div class="line">              &#125;);</div><div class="line">            &#125;);</div><div class="line">          &#125;);</div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    defalut:</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在离开这个页面时用onLeave将afterLoad（）所做的设置还原，才能保证动画在每次进入到该页都可以显示
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">onLeave（link，index）&#123;</div><div class="line">  <span class="keyword">switch</span>（index）&#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>：</div><div class="line">        <span class="keyword">break</span>；</div><div class="line">    ......</div><div class="line">    case <span class="number">4</span>：move（<span class="string">'section4 img.edition'</span>）.rotate(<span class="number">-360</span>).end(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     move(<span class="string">'section4 img.sport'</span>).rotate(<span class="number">-360</span>).end(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     &#125;);</div><div class="line">    &#125;);</div><div class="line">        <span class="keyword">break</span>；</div><div class="line">    <span class="keyword">default</span>：</div><div class="line">        <span class="keyword">break</span>；</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS笔记]]></title>
      <url>http://yoursite.com/2016/11/29/JS%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="css样式笔记">1.bind、call、apply函数的用法</h3>

<p>js里函数调用有 4 种模式：方法调用、正常函数调用、构造器函数调用、apply/call 调用。<br>同时，无论哪种函数调用除了你声明时定义的形参外，还会自动添加 2 个形参，分别是 this 和 arguments。</p>
 <a id="more"></a>
<p></p><h4 id="方法调用">·方法调用</h4>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;    </div><div class="line">  <span class="attr">c</span> : <span class="number">0</span>,    </div><div class="line">  <span class="attr">f</span> : <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;                </div><div class="line">      <span class="keyword">this</span>.c = n;    </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">a.f(<span class="number">3</span>);</div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>函数是一个对象的属性,this绑定的是对象 a</p>
</blockquote>
<p></p><h4 id="正常函数调用">·正常函数调用</h4>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>) </span>&#123;        </div><div class="line">    <span class="keyword">this</span>.x = n;</div><div class="line">&#125;</div><div class="line">f(<span class="number">3</span>);</div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>函数 f里的 this 绑定的是全局对象,如果是在浏览器运行的解释器中一般来说是 window 对象。
所以这里 this.x 访问的其实是 window.x .如果 window 没有 x 属性，那就是给 window 对象添加了一个 x 属性，同时赋值。</p>
</blockquote>
<p></p><h4 id="构造器函数调用">·构造器函数调用</h4>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x</span>) </span>&#123;        </div><div class="line">    <span class="keyword">this</span>.m = x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> a(<span class="number">3</span>);</div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>this 绑定的是 b</p>
</blockquote>
<p></p><h4 id="apply调用">·apply调用</h4>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x</span>) </span>&#123;        </div><div class="line">  <span class="keyword">this</span>.b = x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line">a.apply(o, [<span class="number">3</span>]);</div><div class="line">alert(a.b);    <span class="comment">// undefined</span></div><div class="line">alert(o.b);    <span class="comment">// 3</span></div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>apply 函数接收 2 个参数，第一个是传递给这个函数用来绑定 this 的值，第二个是一个参数数组。如果你 apply 的第一个参数传递 null，那么在函数 a 里面 this 指针依然会绑定全局对象。</p>
</blockquote>
<p></p><h4 id="call调用">·call调用</h4>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x, y</span>) </span>&#123;    </div><div class="line">    alert(x, y);    </div><div class="line">    alert(<span class="keyword">this</span>);    </div><div class="line">    alert(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line">a.apply(<span class="literal">null</span>, [<span class="number">3</span>, <span class="number">33</span>]);</div><div class="line">a.call(<span class="literal">null</span>, <span class="number">3</span>, <span class="number">33</span>);</div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>call() 函数接收 2 个参数，第一个是传递给这个函数用来绑定 this 的值，第二个接受的是不定参数。就是可以像平时给函数传参那样一个一个传递参数。</p>
</blockquote>
<p></p><h4 id="bind调用">·bind调用</h4>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = &#123;   </div><div class="line">    <span class="string">"x"</span> : <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y</span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.x + y);</div><div class="line">&#125;</div><div class="line">f.apply(m, [<span class="number">3</span>]);</div><div class="line">f.call(m, <span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> fo = f.bind(m, <span class="number">3</span>);</div><div class="line">fo();</div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>call() 与 apply() 都是立马就调用了对应的函数，而 bind() 不会， bind() 会生成一个新的函数。<br>bind() 函数的参数跟 call() 一致，第一个参数也是绑定 this 的值，后面接受传递给函数的不定参数。bind() 生成的新函数返回后，你可以随时调用。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery高级]]></title>
      <url>http://yoursite.com/2016/11/29/jquery_senior/</url>
      <content type="html"><![CDATA[<h4 id="基础方法扩充"><a href="#基础方法扩充" class="headerlink" title="基础方法扩充"></a>基础方法扩充</h4><blockquote>
<ul>
<li><p><strong>get()</strong>    ——    把JQ转成原声JS下标和length属性 <br>
  <strong>length</strong><br>  <strong>[ ]</strong>  ——  下标<br>  加下标是单个，不加下标是一组,例：
  alert( $(‘#div1’).get(0).innerHTML );</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*for(var i=0;i&lt;$('li').get().length;i++)&#123;</span></div><div class="line">   $('li').get(i).style.background = 'red';</div><div class="line">&#125;*/</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;$(<span class="string">'li'</span>).length;i++)&#123;</div><div class="line">   $(<span class="string">'li'</span>).get(i).style.background = <span class="string">'red'</span>;</div><div class="line">   <span class="comment">//$('li')[i].style.background = 'red';</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>outerWidth()</strong>: ——  针对隐藏元素和参数true，innerWith()、width都如此（jq中可以获取隐藏元素的宽度）   </p>
<pre><code>`js里offsetWidth：是获取不到隐藏元素的值`
</code></pre></li>
<li><strong>text()</strong>   ——      获取所有的文本内容     合体的特例</li>
<li><strong>remove()</strong><br>  <strong>detach()</strong> ——  跟remove方法一样，只不过会保留删除这个元素的操作行为（翻：派遣）</li>
<li><strong>$()</strong>:  ——    等DOM加载完就可以执行了 , 性能要好<br>（//DOMContentLoaded      DOM事件）<br>  <code>$(document).ready()</code>  - $()是其简写方式</li>
</ul>
</blockquote>
<a id="more"></a>
<h4 id="下的常用方法（1）"><a href="#下的常用方法（1）" class="headerlink" title="$()下的常用方法（1）"></a>$()下的常用方法（1）</h4><blockquote>
<ul>
<li><strong>parents()</strong>   ——   获取当前元素的所有祖先节点，参数就是筛选功能<br>  <strong>closest()</strong>  ——  获取最近的指定的祖先节点(包括当前元素自身),必须要写筛选的参数,只能找到一个元素</li>
<li><p><strong>siblings()</strong> ——  找所有的兄弟节点，参数也是筛选功能,例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'span'</span>).siblings().css(<span class="string">'background'</span>,<span class="string">'red'</span>);   <span class="comment">//除了span，对兄弟节点进行操作</span></div><div class="line">$().siblings(<span class="string">'span'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>);     <span class="comment">//筛选功能，只有span操作</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>nextAll()</strong> ——  下面所有的兄弟节点，参数也是筛选功能   <br>
  <strong>prevAll()</strong>  ——  上面所有的兄弟节点</p>
</li>
<li><strong>parentsUntil()</strong><br>  <strong>nextUntil()</strong><br>  <strong>prevUntil()</strong> ——  截止<br>  例：<code>$(&#39;span&#39;).nextUntil(&#39;h2&#39;).css(&#39;background&#39;,&#39;red&#39;);   //向下找截止到h2的子节点</code></li>
<li><strong>clone()</strong>  ——  复制节点；()里加true可以接收一个参数 ，作用可以复制之前的操作行为<br>例：<code>$(&#39;div&#39;).clone(true).appendTo( $(&#39;span&#39;) );</code></li>
<li><strong>wrap()</strong>  —— 包装（每个元素单独被包装）<br>例： <code>$(&#39;span&#39;).wrapInner(&#39;&lt;div&gt;&#39;);</code> <br>
  <strong>wrapAll()</strong> ——整体包装（中间有别的标签会被挤到整体包装的下方）<br>  <strong>wrapInner()</strong> ——  内部包装<br>  <strong>unwrap()</strong> —— 删除包装（删除父级：不包括父级）</li>
<li><p><strong>add()</strong>  —— 添加组合节点<br>例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> elem = $(<span class="string">'div'</span>);</div><div class="line"><span class="keyword">var</span> elem2 = elem.add(<span class="string">'span'</span>);</div><div class="line">elem.css(<span class="string">'color'</span>,<span class="string">'red'</span>);</div><div class="line">elem2.css(<span class="string">'background'</span>,<span class="string">'yellow'</span>);</div></pre></td></tr></table></figure>
<p><strong>slice()</strong>  ——  选中节点的范围<br>例：<code>$(&#39;li&#39;).slice(1,4).css(&#39;background&#39;,&#39;red&#39;);    //选择了第1-第3个元素</code></p>
</li>
<li><strong>serialize()</strong>  ——串联化 <br>
  <strong>serializeArray()</strong> —— 数组形式串联化<br>  例：  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"b"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"c"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//console.log($('form').serialize());            //string : a=1&amp;b=2&amp;c=3</span></div><div class="line">    <span class="built_in">console</span>.log( $(<span class="string">'form'</span>).serializeArray() );</div><div class="line">    <span class="comment">// [</span></div><div class="line">    <span class="comment">//   &#123; name : 'a' , value : '1' &#125;,</span></div><div class="line">    <span class="comment">//   &#123; name : 'b' , value : '2' &#125;,</span></div><div class="line">    <span class="comment">//   &#123; name : 'c' , value : '3' &#125;</span></div><div class="line">    <span class="comment">// ]</span></div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="下的常用方法（2）"><a href="#下的常用方法（2）" class="headerlink" title="$()下的常用方法（2）"></a>$()下的常用方法（2）</h4><blockquote>
<ul>
<li><p><strong>animate()</strong>  —— 运动<br>  第一个参数 : {} 运动的值和属性<br>  第二个参数 : 时间(运动快慢的)  默认 : 400<br>  第三个参数 : 运动形式 只有两种运动形式 ( 默认 : swing(慢快慢) linear(匀速) ) <br>
  第四个参数 :  回调函数（链式运动）<br>  例：  </p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">'#div1'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $(<span class="keyword">this</span>).animate(&#123;<span class="attr">width</span> : <span class="number">300</span> , <span class="attr">height</span> : <span class="number">300</span>&#125; , <span class="number">4000</span> , <span class="string">'linear'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          $(<span class="keyword">this</span>).animate&#123;(height:<span class="number">300</span>)&#125;;</div><div class="line">      &#125;);</div><div class="line">      $(<span class="string">'#div2'</span>).animate(&#123;<span class="attr">width</span> : <span class="number">300</span> , <span class="attr">height</span> : <span class="number">300</span>&#125; , <span class="number">4000</span> , <span class="string">'swing'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>例：链式运动其他写法：<br>  <code>$(this).animate({width : 300 , height : 300} , 4000).animate({height:300},2000);</code></p>
</li>
<li><p><strong>stop()</strong>   ——   默认：只会阻止当前运动（不阻止后续运动）,例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#div1'</span>).stop(<span class="literal">true</span>);          <span class="comment">//阻止后续的运动</span></div><div class="line">$(<span class="string">'#div1'</span>).stop(<span class="literal">true</span>,<span class="literal">true</span>);     <span class="comment">//可以立即停止到指定的目标点 （false，true）也有，尝试下期间不同</span></div><div class="line">$(<span class="string">'#div1'</span>).finish();            <span class="comment">//立即停止到所有指定的目标点</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>delay()</strong>  ——   延迟,例：  <br>
  <code>$(this).animate({width : 300} , 2000).delay(1000).animate({height : 300} , 2000);</code></p>
</li>
<li><p><strong>delegate()</strong> —— 事件委托 <br>
  <strong>undelegate()</strong> ——阻住事件委托<br>  例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'ul'</span>).delegate(<span class="string">'li'</span>,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.style.background = <span class="string">'red'</span>;</div><div class="line">    $(<span class="string">'ul'</span>).undelegate();       <span class="comment">//阻止事件委托</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>trigger()</strong>  —— 主动触发<br>  例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> $(<span class="string">'#div1'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="number">123</span>);</div><div class="line"> &#125;);</div><div class="line">$(<span class="string">'#div1'</span>).trigger(<span class="string">'click'</span>);  <span class="comment">//主动触发</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>ev.data</strong>   ——  指的中间的json<br>  <strong>ev.target</strong>  —— 当前操作的事件源<br>  <strong>ev.type</strong>   ——  当前操作的事件类型<br>  例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#div1'</span>).on(<span class="string">'click'</span>,&#123;<span class="attr">name</span>:<span class="string">'hello'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">   <span class="comment">//alert(ev.data.name);</span></div><div class="line">   <span class="comment">//alert( ev.target );</span></div><div class="line">   alert( ev.type );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="与-的区别"><a href="#与-的区别" class="headerlink" title="$()与$的区别"></a>$()与$的区别</h4><blockquote>
<p><code>$().css()</code>  <code>$().html()</code>  <code>$().val()</code>  : 只能给JQ对象用<br>  <code>$.xxx()</code> <code>$.yyy()</code>  <code>$.zzz()</code>  : 不仅可以给JQ用，也可以给原生JS用 : 叫做工具方法
  $，jQuery是一样的,<code>$(function(){}); =jQuery(function(){});</code></p>
</blockquote>
<h4 id="下的常用方法（3）"><a href="#下的常用方法（3）" class="headerlink" title="$下的常用方法（3）"></a>$下的常用方法（3）</h4><blockquote>
<ul>
<li><p><strong>type()</strong>  ——  判断类型<br>例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//alert( typeof a );</span></div><div class="line">alert( $.type(a) );      <span class="comment">//优点：能判断出更多类型</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>trim()</strong>  —— 去除空格</p>
</li>
<li><p><strong>inArray()</strong> ——  类似于indexOf<br>例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</div><div class="line">alert(  $.inArray(<span class="string">'b'</span>,arr)  );</div></pre></td></tr></table></figure>
</li>
<li><p><strong>proxy()</strong> —— 改变this指向,<code>*</code>传参3种方式都可以：<br>  <code>$.proxy(show , document)(3,4);</code>
  <code>$.proxy(show , document,3,4);</code>
  <code>$.proxy(show , document,3)(4);</code>
  例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">n1,n2</span>)</span>&#123;</div><div class="line">  alert(n1);</div><div class="line">  alert(n2);</div><div class="line">  alert(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//$(document).click( $.proxy(show,window)(3,4)  );   刷新就会执行</span></div><div class="line">$(<span class="built_in">document</span>).click( $.proxy(show,<span class="built_in">window</span>,<span class="number">3</span>,<span class="number">4</span>)  );    为了能在操作的时候执行而不是一刷新就执行</div></pre></td></tr></table></figure>
</li>
<li><p><strong>noConflict()</strong>  ——  防止冲突<br>例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> miaov = $.noConflict();</div><div class="line"><span class="keyword">var</span> $ = <span class="number">10</span>;</div><div class="line">miaov(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   miaov(<span class="string">'body'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>parseJSON()</strong>  ——   把字符串解析成Json类型,例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'&#123;"name":"hello"&#125;'</span>;</div><div class="line">alert($.parseJSON( str ).name);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>makeArray()</strong>   ——  把类数组转成真正的数组,例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);     <span class="comment">//类数组</span></div><div class="line">$.makeArray(aDiv).push();</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="下的常用方法——ajax使用"><a href="#下的常用方法——ajax使用" class="headerlink" title="$下的常用方法——ajax使用"></a>$下的常用方法——ajax使用</h4><blockquote>
<ul>
<li><p><strong>ajax()</strong> :  json<br>  形式的配置参数<br>  url    success<br>  error   contentType<br>  data     type<br>  dataType（返回的数据类型）    cache（是否缓存）     timeout（是否延迟）<br>  例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">   <span class="attr">url</span> : <span class="string">'xxx.php'</span>,</div><div class="line">   <span class="attr">data</span> : <span class="string">'name=hello&amp;age=20'</span>,</div><div class="line">   <span class="attr">type</span> : <span class="string">'POST'</span>,</div><div class="line">   <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">     alert(<span class="number">1</span>);</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">error</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     alert(<span class="number">2</span>);</div><div class="line">   &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>抽象出来的方法<br>  get()<br>  例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">'xxx.php'</span>,&#123;<span class="attr">name</span>:<span class="string">'hellow'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> &#125;);       <span class="comment">//（地址，已传输的数据，成功的回调）</span></div></pre></td></tr></table></figure>
<p>post()
  getJSON() 支持jsonp（跨域）的形式：指定<code>?callback=?</code><br>  例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$.getJSON(<span class="string">'xxx.php?callback=?'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">   data</div><div class="line">&#125;);</div><div class="line"><span class="comment">//随机(&#123;&#125;);</span></div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><blockquote>
<ul>
<li><p>$ <br>
  $.extend<br>  例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.extend(&#123;</div><div class="line">  <span class="attr">leftTrim</span> : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">     <span class="keyword">return</span> str.replace(<span class="regexp">/^\s+/</span>,<span class="string">''</span>);      把左边的空格都去掉</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> str=<span class="string">'     hellow     '</span></div><div class="line">alert(<span class="string">'("+$.leftTrim(str)+")'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>$.fn <br>
  $.fn.extend <br>
  <code>$.extend : 扩展工具方法下的插件形式  $.xxx() $.yyy()</code> <br>
  <code>$.fn.extend  :  扩展到JQ对象下的插件形式  $().xxx()  $().yyy()</code></p>
</li>
</ul>
</blockquote>
<h4 id="继续深入的话，我们还应该掌握哪些？"><a href="#继续深入的话，我们还应该掌握哪些？" class="headerlink" title="继续深入的话，我们还应该掌握哪些？"></a>继续深入的话，我们还应该掌握哪些？</h4><blockquote>
<p>$.Callbacks()    :   回调对象 <br>
  deferred()  :  延迟对象 <br>
  $.hodeReady()   :  持有和释放ready <br>
  $.dequeue()  :  执行队列 <br>
  $.support  :   功能检测</p>
</blockquote>
<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><blockquote>
<p>理解jquery设计思想
  记住大部分jquery API的使用 <br>
  英文：<a href="http://api.jquery.com/" target="_blank" rel="external">http://api.jquery.com/</a> <br>
  中文：<a href="http://www.css88.com/jqapi-1.9/" target="_blank" rel="external">http://www.css88.com/jqapi-1.9/</a> <br>
  <a href="http://tangram.baidu.com/api" target="_blank" rel="external">http://tangram.baidu.com/api</a> <br>
  做一个复杂一些的jquery效果</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery基础]]></title>
      <url>http://yoursite.com/2016/11/29/jquery_basics/</url>
      <content type="html"><![CDATA[<h3 id="jQuery基础"><a href="#jQuery基础" class="headerlink" title="jQuery基础"></a>jQuery基础</h3><h4 id="什么是JQ？"><a href="#什么是JQ？" class="headerlink" title="什么是JQ？"></a>什么是JQ？</h4><blockquote>
<p>一个优秀的JS库，大型开发必备</p>
</blockquote>
<h4 id="JQ的好处？"><a href="#JQ的好处？" class="headerlink" title="JQ的好处？"></a>JQ的好处？</h4><blockquote>
<p>简化JS的复杂操作 <br>
  不再需要关心兼容性<br>
  提供大量实用方法</p>
</blockquote>
<h4 id="如何学习JQ？"><a href="#如何学习JQ？" class="headerlink" title="如何学习JQ？"></a>如何学习JQ？</h4><blockquote>
<p><a href="www.jquery.com">www.jquery.com</a> <br>
  JQ只是辅助工具，要正确面对 <br>
  需要分阶段学习</p>
</blockquote>
<a id="more"></a>
<hr>
<h3 id="选择网页元素"><a href="#选择网页元素" class="headerlink" title="选择网页元素"></a>选择网页元素</h3><h4 id="独有表达式选择"><a href="#独有表达式选择" class="headerlink" title="独有表达式选择"></a>独有表达式选择</h4><blockquote>
<p>li:first<br>last<br>eq(2)相当于下标<br>even 奇数行<br>odd 偶数行
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'li:eq(2)'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>);</div><div class="line">$(<span class="string">'li:odd'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="多种筛选方法"><a href="#多种筛选方法" class="headerlink" title="多种筛选方法"></a>多种筛选方法</h4><blockquote>
<p>filter 筛选<br>  [属性]=xx
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'li.box'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>);</div><div class="line">$(<span class="string">'li'</span>).filter(<span class="string">'box'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>);</div><div class="line">$(<span class="string">'li'</span>).filter(<span class="string">'[title=hello]'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h3 id="JQ写法"><a href="#JQ写法" class="headerlink" title="JQ写法"></a>JQ写法</h3><h4 id="方法函数化"><a href="#方法函数化" class="headerlink" title="方法函数化"></a>方法函数化</h4><blockquote>
<p>window.onload = function(){}; —— <font color="#0099ff">$(function(){}); </font> —— function $(){} （存在源码）<br>element.innerHTML = 123; —— <font color="#0099ff">html(123)</font> —— function html(){}<br>onclick = function(){};  —— <font color="#0099ff">click(function(){})</font> ——  function click(){}
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//var oDiv = $('#div1');</span></div><div class="line">    $(<span class="string">'#div1'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert( $(<span class="keyword">this</span>).html() );</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">$(<span class="string">'ul'</span>).children().css(<span class="string">'background'</span>,<span class="string">'red'</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="链式操作（不方便阅读，使用熟练使用）"><a href="#链式操作（不方便阅读，使用熟练使用）" class="headerlink" title="链式操作（不方便阅读，使用熟练使用）"></a>链式操作（不方便阅读，使用熟练使用）</h4><blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#div1'</span>).html(<span class="string">'hello'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   alert(<span class="number">123</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="取值赋值合体"><a href="#取值赋值合体" class="headerlink" title="取值赋值合体"></a>取值赋值合体</h4><blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">oDiv.innerHTML = <span class="string">'hello'</span>;  <span class="comment">//赋值</span></div><div class="line">alert( oDiv.innerHTML );  <span class="comment">//取值</span></div><div class="line"></div><div class="line">$(<span class="string">'#div1'</span>).html(<span class="string">'hello'</span>);  <span class="comment">//赋值</span></div><div class="line">alert( $(<span class="string">'#div1'</span>).html() ); <span class="comment">//取值</span></div><div class="line"><span class="comment">//里面有参数为赋值，无参数为取值</span></div><div class="line"></div><div class="line">css(<span class="string">'width'</span>,<span class="string">'200px'</span>)     设置</div><div class="line">css(<span class="string">'width'</span>)</div></pre></td></tr></table></figure>
<p><font color="#0099ff">当一组元素的时候，取值是一组中的第一个</font>   <code>alert( $(&#39;li&#39;).html() );</code><br>  <font color="#0099ff">当一组元素的时候，赋值是一组中的所有元素</font>   <code>$(&#39;li&#39;).html(&#39;hello&#39;);</code></p>
</blockquote>
<h4 id="JQ与JS关系"><a href="#JQ与JS关系" class="headerlink" title="JQ与JS关系"></a>JQ与JS关系</h4><blockquote>
<p>可以共存，不能混用</p>
</blockquote>
<h4 id="下的常用方法（1）"><a href="#下的常用方法（1）" class="headerlink" title="$()下的常用方法（1）"></a>$()下的常用方法（1）</h4><blockquote>
<ul>
<li>has()     包含<br>例： <code>$(&#39;div&#39;).has(&#39;span&#39;).css(&#39;background&#39;,&#39;red&#39;);</code></li>
<li>not()     filter的反义词</li>
<li>filter()  过滤<br>例： <code>$(&#39;div&#39;).filter(&#39;.box&#39;).css(&#39;background&#39;,&#39;red&#39;);</code></li>
<li>next()    选择下一个兄弟节点</li>
<li>prev()    选择上一个兄弟节点</li>
<li>find()    当前元素集合中某个元素</li>
<li>eq()    下标的作用，选择第几个元素<br>例： <code>$(&#39;div&#39;).find(&#39;h2&#39;).eq(1).css(&#39;background&#39;,&#39;red&#39;);</code></li>
<li>index()   索引就是当前元素在所有兄弟节点中的位置</li>
<li>attr()    设置属性(翻译：属性)<br>例：<code>$(&#39;div&#39;).attr(&#39;title&#39;,&#39;456&#39;);</code></li>
</ul>
</blockquote>
<h4 id="编写选项卡"><a href="#编写选项卡" class="headerlink" title="编写选项卡"></a>编写选项卡</h4><blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">  <span class="keyword">var</span> aInput = oDiv.getElementsByTagName(<span class="string">'input'</span>);</div><div class="line">  <span class="keyword">var</span> aCon = oDiv.getElementsByTagName(<span class="string">'div'</span>);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aInput.length;i++)&#123;</div><div class="line">    aInput[i].index = i;</div><div class="line">    aInput[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aInput.length;i++)&#123;</div><div class="line">        aInput[i].className = <span class="string">''</span>;</div><div class="line">        aCon[i].style.display = <span class="string">'none'</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.className = <span class="string">'active'</span>;</div><div class="line">      aCon[<span class="keyword">this</span>.index].style.display = <span class="string">'block'</span>;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">'#div1'</span>).find(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#div1'</span>).find(<span class="string">'input'</span>).attr(<span class="string">'class'</span>,<span class="string">''</span>);</div><div class="line">    $(<span class="string">'#div1'</span>).find(<span class="string">'div'</span>).css(<span class="string">'display'</span>,<span class="string">'none'</span>);</div><div class="line">    $(<span class="keyword">this</span>).attr(<span class="string">'class'</span>,<span class="string">'active'</span>);</div><div class="line">    $(<span class="string">'#div1'</span>).find(<span class="string">'div'</span>).eq( $(<span class="keyword">this</span>).index() ).css(<span class="string">'display'</span>,<span class="string">'block'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="下的常用方法（2）"><a href="#下的常用方法（2）" class="headerlink" title="$()下的常用方法（2）"></a>$()下的常用方法（2）</h4><blockquote>
<ul>
<li><strong>addClass()</strong>   ——  添加样式<br>  <strong>removeClass()</strong>——  删除样式   </li>
<li><strong>width()</strong>  ——   width<br>  <strong>innerWidth()</strong> ——  width+padding<br>  <strong>outerWidth()</strong>  ——   width+padding+border<br>  <strong>outerWidth(true)</strong> —— width+padding+border+margin<br>  <strong>height()……</strong></li>
<li><strong>insertBefore()</strong>  —— 把xx剪切到xx前面 <code>区别 相当于动词</code>    <pre><code>例：$(&apos;span&apos;).insertBefore( $(&apos;div&apos;) ); 后续操作作用于span          
</code></pre>  <strong>before()</strong>   ——       xx的前面必须是div <code>相当于名词</code>    <pre><code>例：$(&apos;div&apos;).before( $(&apos;&apos;span&apos;) ); 后续操作作用于div   
</code></pre></li>
<li><strong>insertAfter()</strong> ——   把xx剪切到xx后面  (原生js里没有)<br>  <strong>after()</strong>    ——      xx的后面必须是yy   </li>
<li><strong>appendTo()</strong>  ——     把xx剪切到xx元素里最后的位置<br>  <strong>append()</strong>   </li>
<li><strong>prependTo()</strong>   ——   把xx剪切到xx元素里最开始的位置  (原生js里没有)<br>  <strong>prepend()</strong></li>
<li><p><strong>remove()</strong>    ——     删除节点<br>  例：  </p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oDiv = $(<span class="string">'div'</span>).remove();     <span class="comment">//remove返回的是div的值</span></div><div class="line"> $(<span class="string">'body'</span>).append( oDiv );     <span class="comment">//可恢复删除</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>on()</strong>             优点：1.除了系统自带时间还可以写自定义事件;2.同时写多个事件<br>  例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*('div').click(function()&#123;</span></div><div class="line">  alert(123);</div><div class="line">&#125;);*/</div><div class="line">$(<span class="string">'div'</span>).on(<span class="string">'click mouseover'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="number">123</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>json写法操作<br>  例：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).on(&#123;</div><div class="line">   <span class="string">'click'</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="number">123</span>);</div><div class="line">   &#125;,</div><div class="line">   <span class="string">'mouseover'</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="number">456</span>);</div><div class="line">   &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>off()</strong>  —— 取消事件，也可以指定取消对象,例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).on(<span class="string">'click mouseover'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   alert(<span class="number">123</span>);</div><div class="line">   $(<span class="string">'div'</span>).off(<span class="string">'mouseover'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>scrollTop()</strong>   ——  纵向滚动条,例：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   alert( $(<span class="built_in">window</span>).scrollTop() );  <span class="comment">//滚动距离</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="编写弹窗"><a href="#编写弹窗" class="headerlink" title="编写弹窗"></a>编写弹窗</h4><blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">创建标签：<span class="string">`$('&lt;div&gt;')`</span></div><div class="line">例：</div><div class="line"><span class="keyword">var</span> oDiv = $(<span class="string">'&lt;div&gt;div&lt;/div&gt;'</span>);</div><div class="line"><span class="comment">//$('body').append( oDiv );</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//var oDiv = $('&lt;div&gt;div&lt;/div&gt;');</span></div><div class="line">    <span class="comment">//$('body').append( oDiv );</span></div><div class="line"></div><div class="line">    $(<span class="string">'#input1'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> oLogin = $(<span class="string">'&lt;div id="login"&gt;&lt;p&gt;用户名:&lt;input type="text" /&gt;&lt;/p&gt;&lt;p&gt;密码:&lt;input type="text" /&gt;&lt;/p&gt;&lt;div id="close"&gt;X&lt;/div&gt;&lt;/div&gt;'</span>);</div><div class="line">        $(<span class="string">'body'</span>).append( oLogin );</div><div class="line">        oLogin.css(<span class="string">'left'</span> , ($(<span class="built_in">window</span>).width() - oLogin.outerWidth())/<span class="number">2</span> );</div><div class="line">        oLogin.css(<span class="string">'top'</span> , ($(<span class="built_in">window</span>).height() - oLogin.outerHeight())/<span class="number">2</span> );</div><div class="line"></div><div class="line">        $(<span class="string">'#close'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            oLogin.remove();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        $(<span class="built_in">window</span>).on(<span class="string">'resize scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            oLogin.css(<span class="string">'left'</span> , ($(<span class="built_in">window</span>).width() - oLogin.outerWidth())/<span class="number">2</span> );</div><div class="line">            oLogin.css(<span class="string">'top'</span> , ($(<span class="built_in">window</span>).height() - oLogin.outerHeight())/<span class="number">2</span> + $(<span class="built_in">window</span>).scrollTop() );</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="下的常用方法-事件（3）"><a href="#下的常用方法-事件（3）" class="headerlink" title="$()下的常用方法-事件（3）"></a>$()下的常用方法-事件（3）</h4><blockquote>
<ul>
<li><strong>ev</strong>   ——  event对象（已兼容） <br>
<strong>pageX / pageY</strong>   ——鼠标的坐标<br>  <code>ev.pageX(相对于文档)【JQ】=clientX(相对于可视区)+滚动条距离【JS】</code><br><strong>which</strong>    ——  找键盘键值 （还可以对应鼠标的键值）<br>  <code>ev.which : keyCode</code></li>
<li><strong>preventDefault</strong> —— 阻止默认事件 <br>
<strong>stopPropagation</strong>—— 阻止冒泡操作 <br>
<strong>return false;</strong>  —— 阻止默认事件 + 阻止冒泡的操作</li>
<li><p><strong>one()</strong>         ——  只执行事件一次<br>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).one(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="number">123</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>offset()</strong>  —— 获取到屏幕的上或左距离（下面有left &amp; top）<br><strong>position()</strong> —— 指有定位的父级的left/top值,把当前元素转化成类似定位的形式 （不算margin的值 ，下面有left &amp; top ）<br>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert( $(<span class="string">'#div2'</span>).offset().left );</div><div class="line">alert( $(<span class="string">'#div2'</span>).position().top );</div></pre></td></tr></table></figure>
</li>
<li><p><strong>offsetParent()</strong> —— 获取有定位的父级<br><strong>Parent()</strong>   ——  获取父级</p>
</li>
<li><strong>val()</strong>    ——    获取一个元素的val值 ,<code>val（XXX）</code> 为赋值</li>
<li><strong>size()</strong>    ——      获取一组元素的长度（像length）</li>
<li><strong>each()</strong>     ——     循环<br>例：<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'li'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,elem</span>)</span>&#123;   <span class="comment">//一参：下标 二参 : 每个元素</span></div><div class="line">   $(elem).html(i);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="编写拖拽"><a href="#编写拖拽" class="headerlink" title="编写拖拽"></a>编写拖拽</h4><blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> disX = <span class="number">0</span>;</div><div class="line">   <span class="keyword">var</span> disY = <span class="number">0</span>;</div><div class="line">   $(<span class="string">'div'</span>).mousedown(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;        </div><div class="line">      disX = ev.pageX - $(<span class="keyword">this</span>).offset().left;</div><div class="line">      disY = ev.pageY - $(<span class="keyword">this</span>).offset().top;        </div><div class="line">      $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;   <span class="comment">//给document加是为了不管怎么move都不会脱离鼠标</span></div><div class="line">         $(<span class="string">'div'</span>).css(<span class="string">'left'</span>,ev.pageX - disX);</div><div class="line">         $(<span class="string">'div'</span>).css(<span class="string">'top'</span>,ev.pageY - disY);            </div><div class="line">      &#125;);        </div><div class="line">      $(<span class="built_in">document</span>).mouseup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">         $(<span class="built_in">document</span>).off();</div><div class="line">      &#125;);      </div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;        </div><div class="line">   &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="下的常用方法（4）"><a href="#下的常用方法（4）" class="headerlink" title="$()下的常用方法（4）"></a>$()下的常用方法（4）</h4><blockquote>
<ul>
<li><strong>hover()</strong>     ——   鼠标移入移出<br>  <code>hover(function(){},function(){});</code> 前者对应鼠标移入，后者对应鼠标移出</li>
<li><strong>show()</strong>     ——    显示,<code>show(时间)</code>可控制显示隐藏过程的时间<br>  <strong>hide()</strong>    ——     隐藏</li>
<li><strong>fadeIn()</strong>   ——    淡入,<code>fadeIn(时间)</code>可控制显示隐藏过程的时间，默认400毫秒  <br>
<strong>fadeOut()</strong>  ——    淡出</li>
<li><strong>fadeTo()</strong>  ——     淡入淡出到一定透明度（时间，透明值）<br>  <code>fadeTo(1000,0.5);</code></li>
<li><strong>slideDown()</strong>  ——  向下展开<br>  <strong>slideUp()</strong>   ——   向上卷曲</li>
</ul>
</blockquote>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><hr>
<p>理解jquery设计思想 <br>
记住大部分jquery API的使用 <br>
英文：<a href="http://api.jquery.com/" target="_blank" rel="external">http://api.jquery.com/</a><br>中文：<a href="http://www.css88.com/jqapi-1.9/" target="_blank" rel="external">http://www.css88.com/jqapi-1.9/</a> <br>
<a href="http://tangram.baidu.com/api" target="_blank" rel="external">http://tangram.baidu.com/api</a> <br></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css笔记]]></title>
      <url>http://yoursite.com/2016/11/28/css%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p></p><h3 id="css样式笔记">1.css样式笔记</h3><p></p>
<h4 id="清除浮动">·清除浮动</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line"> <span class="attribute">content</span>:<span class="string">""</span>;</div><div class="line"> <span class="attribute">display</span>:block;</div><div class="line"> <span class="attribute">clear</span>:both;</div><div class="line"> <span class="attribute">height</span>:<span class="number">0</span>;</div><div class="line"> <span class="attribute">visibility</span>:hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="多行文本显示一行与省略号">·多行文本显示一行与省略号</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line"><span class="attribute">height</span>: <span class="number">32px</span>;</div><div class="line"><span class="attribute">overflow</span>: hidden;</div><div class="line"><span class="attribute">text-overflow</span>:ellipsis;</div><div class="line"><span class="attribute">white-space</span>:nowrap;</div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

&gt; text-overflow属性仅是注解，当文本溢出时是否显示省略标记。并不具备其它的样式属性定义。所以3个属性都要写<br>text-overflow:ellipsis属性在FF中是没有效果的。

<h4 id="多行文本溢出显示省略号">·多行文本溢出显示省略号</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line"><span class="attribute">height</span>: <span class="number">32px</span>;</div><div class="line"><span class="attribute">overflow</span>: hidden;</div><div class="line"><span class="attribute">text-overflow</span>: ellipsis;</div><div class="line"><span class="attribute">display</span>: -webkit-box;</div><div class="line"><span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</div><div class="line"><span class="attribute">-webkit-box-orient</span>: vertical;</div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

&gt; -webkit-line-clamp 用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。 常见结合属性：<br>1.display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。<br>2.-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。<br>3.text-overflow: ellipsis; ，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本 。<br>
<h4 id="border详写">·border详写</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line"><span class="attribute">border-top-color</span>: <span class="number">#d9dada</span>;</div><div class="line"><span class="attribute">border-top-left-radius</span>:<span class="number">2em</span>;</div><div class="line"><span class="attribute">border-top-right-radius</span>:<span class="number">2em</span>;</div><div class="line"><span class="attribute">border-bottom-right-radius</span>:<span class="number">2em</span>;</div><div class="line"><span class="attribute">border-bottom-left-radius</span>:<span class="number">2em</span>;</div><div class="line"><span class="attribute">border-radius</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<h4 id="css简单画三角">·css简单画三角</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:before</span>&#123;  </div><div class="line"><span class="attribute">z-index</span>: <span class="number">3</span>;</div><div class="line"><span class="attribute">position</span>: absolute;</div><div class="line"><span class="attribute">display</span>: block;</div><div class="line"><span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line"><span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">border-left</span>: <span class="number">6px</span> solid <span class="number">#fd6500</span>;</div><div class="line"><span class="attribute">border-top</span>: <span class="number">4px</span> dashed transparent;</div><div class="line"><span class="attribute">border-right</span>:<span class="number">6px</span> dashed transparent;</div><div class="line"><span class="attribute">border-bottom</span>: <span class="number">4px</span> dashed transparent;</div><div class="line"><span class="attribute">top</span>:<span class="number">7px</span>;</div><div class="line"><span class="attribute">left</span>:<span class="number">9px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.ico_more</span>&#123;</div><div class="line"><span class="attribute">display</span>: inline-block;</div><div class="line"><span class="attribute">vertical-align</span>: middle;</div><div class="line"><span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">border</span>: <span class="number">4px</span> solid transparent;</div><div class="line"><span class="attribute">border-top-color</span>:<span class="number">#999a9b</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<h4 id="css简单画竖线">·css简单画竖线</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line"><span class="attribute">position</span>: absolute;</div><div class="line"><span class="attribute">display</span>:block;</div><div class="line"><span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line"><span class="attribute">width</span>:<span class="number">1px</span>;</div><div class="line"><span class="attribute">height</span>:<span class="number">10px</span>;</div><div class="line"><span class="attribute">background-color</span>: <span class="number">#434341</span>;</div><div class="line"><span class="attribute">top</span>:<span class="number">14px</span>;</div><div class="line"><span class="attribute">right</span>:-<span class="number">13px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<h3 id="css-伪类&伪元素">2.css-伪类&amp;伪元素</h3>
<h4 id="伪类-动态伪类">·伪类-动态伪类</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">css1</div><div class="line">:link　　   //未访问的链接</div><div class="line">:visited　  //已访问的链接</div><div class="line">:hover　　  //鼠标悬浮在元素上</div><div class="line">:active　 　//被激活的元素</div><div class="line">css2</div><div class="line">:first-child　　//元素的第一个子元素</div><div class="line">:focus　　　　  //拥有键盘输入焦点的元素</div></pre></td></tr></table></figure>

&gt; 先后顺序: Link–visited–hover–active. 伪类名称对大小写不敏感。

<h4 id="伪类-UI元素状态伪类">·伪类-UI元素状态伪类</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">:checked  //选择所有选中的表单元素（checkbox或radio）</div><div class="line">:enabled  //选择所有可点击（启用）的表单元素</div><div class="line">:disabled //选择所有不可点击（禁用）的表单控件</div><div class="line"></div><div class="line">input[type="text"]:disabled &#123;border:1px solid #999;background-color: #fefefe;&#125;  //例</div></pre></td></tr></table></figure>

&gt;IE6-8不支持”:checked”,”:enabled”,”:disabled”这三种选择器。

<h4 id="伪类-:nth选择器">·伪类-:nth选择器</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">:fist-child   //选择某个元素的第一个子元素；IE6不支持</div><div class="line">:last-child   //选择某个元素的最后一个子元素；</div><div class="line">:nth-child()    //选择某个元素的一个或多个特定的子元素； IE6-8和FF3-不支持</div><div class="line">:nth-last-child()   //选择某个元素的一个或多个特定的子元素，从这个元素的最后一个子元素开始算；</div><div class="line">:nth-of-type()    //选择指定的元素；    IE6-8和FF3.0-不支持</div><div class="line">:nth-last-of-type()   //选择指定的元素，从元素的最后一个开始计算；</div><div class="line">:first-of-type    //选择一个父元素下的第一个同类子元素；</div><div class="line">:last-of-type   //选择一个父元素的最后一个同类子元素；</div><div class="line">:only-child     //选择的元素是它的父元素的唯一一个子元素(注意：子节点不包含文本节点)；IE6-8不支持</div><div class="line">:only-of-type   //选择一个元素是它的父元素的唯一一个相同类型的子元素(注意：子节点不包含文本节点);IE6-8和FF3.0-不支持</div><div class="line">:empty          //选择的元素里面没有任何内容。</div></pre></td></tr></table></figure>

<h5 id=":nth-child详细说明">:nth-child详细说明</h5>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">:nth-child(length);      /*参数是具体数字*/</div><div class="line">:nth-child(n);           /*参数是n,n从0开始计算*/</div><div class="line">:nth-child(n*length)     /*n的倍数选择，n从0开始算*/</div><div class="line">:nth-child(n+length);    /*选择大于length后面的元素*/</div><div class="line">:nth-child(-n+length)    /*选择小于length前面的元素*/</div><div class="line">:nth-child(n*length+1);  /*表示隔几选一*/</div><div class="line">//上面length为整数</div><div class="line"></div><div class="line">":nth-child(2n)"等于":nth-child(even)"   偶数</div><div class="line">":nth-child(2n+1)"等于":nth-child(odd)"  奇数</div><div class="line">:nth-child(n+3)   这个选择器是选择从第3个元素开始选择</div><div class="line">:nth-child(-n+3)  选择第3个前面</div><div class="line">:nth-child(4n+1)  隔三选一</div><div class="line">*选择器需要与元素下标完全匹配</div><div class="line"></div><div class="line">E:nth-of-type(n)  表示E父元素中的第n个字节点，且类型为E</div><div class="line">E:nth-last-of-type(n)表示E父元素中的第n个字节点，且类型为E,从后向前计算</div><div class="line">*只匹配在下标出现的选择器/</div></pre></td></tr></table></figure>

&gt;”:nth-last-child()”和”:nth-of-type()”都可以使用此种使用方法。<br> :nth-of-type类似于:nth-child,不同之处就是指定了元素的类型。<br>
<h4 id="其他">·其他</h4>

<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"></span></div><div class="line">:not()     //伪类-否定选择器可以让你定位不匹配该选择器的元素</div><div class="line">q:lang(no) &#123;quotes: "<span class="tag">&lt;<span class="name">"</span> "&gt;</span>";&#125;　　　　//带有指定(lang)属性的元素</div><div class="line"></div><div class="line">input:not([type="submit"]) &#123;border: 1px solid red;&#125;   例:form中所有input加边框，submit不起变化//</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>文字<span class="tag">&lt;<span class="name">q</span> <span class="attr">lang</span>=<span class="string">"no"</span>&gt;</span>段落中的引用的文字<span class="tag">&lt;/<span class="name">q</span>&gt;</span>文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">E:target 表示当前的URL片段的元素类型，这个元素必须是E</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">.tabs&#123;</div><div class="line">        /*overflow: hidden;*/     //表单选择效果</div><div class="line">        overflow: auto;</div><div class="line"> &#125;</div><div class="line">:target&#123;</div><div class="line">        display: block;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-control"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#tab1"</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#tab2"</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#tab3"</span>&gt;</span>tab3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tabs"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab1"</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab2"</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab3"</span>&gt;</span>tab3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p></p><h4 id="伪元素">·伪元素</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">css1</div><div class="line">:first-line　 　//向文本的首行设置特殊样式</div><div class="line">:first-letter　 //向文本的首字母设置特殊样式</div><div class="line">css2</div><div class="line">:before　　     //在元素之前插入新内容</div><div class="line">:after　　      //在元素之后插入新内容</div><div class="line">::selection     //用来改变浏览网页选中文的默认效果</div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>“first-line”|”first-letter” 伪元素只能用于块级元素。
  为了区分伪类和伪元素，现在的写法为::，为了处理兼容一般用:</p>
</blockquote>
<p><br></p>
<p></p><h3 id="css兼容笔记">3.css兼容笔记</h3><p></p>
<p></p><h4 id="opacity兼容">·opacity兼容</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line"><span class="attribute">zoom</span>:<span class="number">1</span>;                      <span class="comment">/*触发IE下块级元素,needed in IE up to version 7, or set width or height to trigger "hasLayout" */</span></div><div class="line"><span class="attribute">opacity</span>:<span class="number">0.5</span>;                 <span class="comment">/* Firefox, Safari(WebKit), Opera) filter: "alpha(opacity=60)"; /* IE 8 */</span></div><div class="line"><span class="attribute">filter</span>:<span class="built_in">alpha</span>(opacity=50);    <span class="comment">/* IE4-8 */</span></div><div class="line"><span class="attribute">-moz-opacity</span>:<span class="number">0.5</span>;            <span class="comment">/* FireFox old version*/</span></div><div class="line"><span class="attribute">-khtml-opacity</span>: <span class="number">0.5</span>;         <span class="comment">/* Sarfari old version */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><h4 id="box-shadow兼容">·box-shadow兼容</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box-shadow</span>&#123;</div><div class="line"><span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">Shadow</span>(color=<span class="string">'#969696'</span>, Direction=135, Strength=5);<span class="comment">/*for ie6,7,8*/</span></div><div class="line"><span class="attribute">background-color</span>: <span class="number">#eee</span>;</div><div class="line"><span class="attribute">-moz-box-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#969696</span>;			<span class="comment">/*Firefox4.0-*/</span></div><div class="line"><span class="attribute">-webkit-box-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#969696</span>;		<span class="comment">/*webkit*/</span></div><div class="line"><span class="attribute">box-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#969696</span>;						<span class="comment">/*Firefox4.0+、Google chrome 10.0+、Oprea10.5+ 或ie9*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>box-shadow:投影方式 X轴偏移量 Y轴偏移量阴影模糊半径 阴影扩展半径 阴影颜色;</p>
</blockquote>
<h3 id="4-css3-filter（滤镜）"><a href="#4-css3-filter（滤镜）" class="headerlink" title="4.css3-filter（滤镜）"></a>4.css3-filter（滤镜）</h3><p>　　以下可加上webkit、moz、ms、o，针对不用内核进行处理，括号里面值可写：0 ~ 1 或者 0% ~ 100%   </p>
<ul>
<li>灰度 -webkit-filter:grayscale(1);</li>
<li>棕色调 -webkit-filter:sepia(1);</li>
<li>饱和度 -webkit-filter:saturate(0.5);</li>
<li>色相旋转 -webkit-filter:hue-rotate(90deg);</li>
<li>反色 -webkit-filter:invert(1);</li>
<li>透明度 -webkit-filter:opacity(0.2);</li>
<li>亮度 -webkit-filter:brightness(0.5);</li>
<li>对比度 -webkit-filter:contrast(2);</li>
<li>模糊 -webkit-filter:blur(3px);</li>
<li>阴影 -webkit-filter:drop-shadow(5px 5px 5px #ccc);</li>
</ul>
<h3 id="5-css3-2D变换"><a href="#5-css3-2D变换" class="headerlink" title="5.css3-2D变换"></a>5.css3-2D变换</h3><h4 id="5-1-transform"><a href="#5-1-transform" class="headerlink" title="5.1 transform"></a>5.1 transform</h4><p>　　transform执行顺序问题——后写先执行</p>
<ul>
<li><p>旋转：rotate(90deg)　　旋转函数（取值度数）</p>
<ul>
<li>deg  度数</li>
<li>transform-origin:x/y　　旋转的基点</li>
<li>transition  　　 旋转时间等<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">    width: 100px;</div><div class="line">    height: 100px;</div><div class="line">    background-color: pink;</div><div class="line">    transform: rotate(0deg);</div><div class="line">    transition: 3s;</div><div class="line">    margin: 100px auto;</div><div class="line">    transform-origin:0 0;   //左上角为中心旋转</div><div class="line">&#125;</div><div class="line">div:hover&#123;</div><div class="line">    transform: rotate(160deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>斜切：skew(90deg)　　 倾斜函数（取值度数）</p>
<ul>
<li>skewX()</li>
<li>skewY()</li>
</ul>
</li>
<li>缩放：scale(2)　　 缩放函数 取值 正数、负数和小数（正常是1倍）<ul>
<li>scaleX()</li>
<li>scaleY()</li>
</ul>
</li>
<li>位移：translate() 　　位移函数<ul>
<li>translateX()</li>
<li>translateY()</li>
</ul>
</li>
</ul>
<h4 id="5-2-matrix-a-b-c-d-e-f-矩阵函数"><a href="#5-2-matrix-a-b-c-d-e-f-矩阵函数" class="headerlink" title="5.2 matrix(a,b,c,d,e,f) 矩阵函数"></a>5.2 matrix(a,b,c,d,e,f) 矩阵函数</h4><ul>
<li><p>通过矩阵实现缩放</p>
<ul>
<li>x轴缩放　　a=x<em>a　　 c=x</em>c　　 e=x*e;</li>
<li>y轴缩放　　b=y<em>b　　d=y</em>d 　　 f=y*f;</li>
</ul>
</li>
<li><p>通过矩阵实现位移</p>
<ul>
<li>x轴位移: e=e+x</li>
<li>y轴位移: f=f+y</li>
</ul>
</li>
<li><p>通过矩阵实现倾斜</p>
<ul>
<li>x轴倾斜: c=Math.tan(xDeg/180*Math.PI)</li>
<li>y轴倾斜: b=Math.tan(yDeg/180*Math.PI)</li>
</ul>
</li>
<li><p>通过矩阵实现旋转</p>
<ul>
<li>a=Math.cos(deg/180*Math.PI);</li>
<li>b=Math.sin(deg/180*Math.PI);</li>
<li>c=-Math.sin(deg/180*Math.PI);</li>
<li>d=Math.cos(deg/180*Math.PI);</li>
</ul>
</li>
<li><p>变换兼容IE9以下IE版本只能通过矩阵来实现</p>
<ul>
<li>filter: progid:DXImageTransform.Microsoft.Matrix( M11= 1, M12= 0, M21= 0 , M22=1,SizingMethod=’auto expand’);</li>
<li>IE下的矩阵没有E和F两个参数　　M11==a; M12==c; M21==b; M22==d</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">  box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">1</span>,</div><div class="line">        b = <span class="number">0</span>,</div><div class="line">        c = <span class="number">0</span>,</div><div class="line">        d = <span class="number">1</span>,</div><div class="line">        e = <span class="number">0</span>,</div><div class="line">        f = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> x=<span class="number">2</span>,</div><div class="line">        y=<span class="number">2</span>;</div><div class="line"></div><div class="line">    a=x*a;</div><div class="line">    c=x*c;</div><div class="line">    e=x*e;</div><div class="line">    b=y*b;</div><div class="line">    d=y*d;</div><div class="line">    f=y*f;</div><div class="line"></div><div class="line">    box.style.transform = <span class="string">"matrix("</span>+a+<span class="string">","</span>+b+<span class="string">","</span>+c+<span class="string">","</span>+d+<span class="string">","</span>+e+<span class="string">","</span>+f+<span class="string">")"</span></div><div class="line">    box.style.filter = <span class="string">"progid:DXImageTransform.Microsoft.Matrix( M11= "</span>+a+<span class="string">", M12= "</span>+c+<span class="string">", M21= "</span>+b+<span class="string">" , M22= "</span>+d+<span class="string">",SizingMethod='auto expand')"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-属性选择器"><a href="#6-属性选择器" class="headerlink" title="6.属性选择器"></a>6.属性选择器</h3><ul>
<li><strong>E[attr]</strong>　　只使用属性名，但没有确定任何属性值   </li>
<li><strong>E[attr=”value”]</strong>　　指定属性名，并指定了该属性的属性值   </li>
<li><strong>E[attr~=”value”]</strong>　　指定属性名，并且具有属性值，此属性值是一个词列表，并且以空格隔开，其中词列表中包含了一个value词，而且等号前面的“〜”不能不写   </li>
<li><strong>E[attr^=”value”]</strong>　　指定了属性名，并且有属性值，属性值是<font color="blue">以value开头的</font>(从头开始匹配)</li>
<li><strong>E[attr$=”value”]</strong>　　指定了属性名，并且有属性值，而且属性值是<font color="blue">以value结束的</font>(从尾开始匹配)</li>
<li><strong>E[attr*=”value”]</strong>　　指定了属性名，并且有属性值，而且属值中<font color="blue">包含了value</font></li>
<li><strong>E[attr|=”value”]</strong>　　指定了属性名，并且属性值<font color="blue">是value或者以“value-”开头的值</font>（比如说zh-cn）<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">  div&#123;</div><div class="line">  	height: 50px;</div><div class="line">  	background-color: pink;</div><div class="line">  	margin-bottom: 10px;</div><div class="line">  &#125;</div><div class="line">  div[data-id]&#123;</div><div class="line">  	background-color: yellow;</div><div class="line">  &#125;</div><div class="line">  div[data-id="2"]&#123;</div><div class="line">  	background-color: yellow;</div><div class="line">  &#125;</div><div class="line">  div[data-userId~="zhangsan"]&#123;    //属性为：data-userId="zhangsan 1"</div><div class="line">  	background-color: yellow;</div><div class="line">  &#125;</div><div class="line">  div[data-userId^="z"]&#123;      //找到以z开头的属性</div><div class="line">  	background-color: yellow;</div><div class="line">  &#125;</div><div class="line">  div[data-userId$="wu"]&#123;     //找到以wu开头的属性</div><div class="line">  	background-color: yellow;</div><div class="line">  &#125;</div><div class="line">  div[data-userId*="n"]&#123;      //找到包含n的属性</div><div class="line">  	background-color: yellow;    </div><div class="line">  &#125;</div><div class="line">  div[data-id|="zh"]&#123;         //找到包含zh的属性</div><div class="line">  	background-color: yellow;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"username"</span> <span class="attr">data-id</span>=<span class="string">"zh-cc"</span> <span class="attr">data-userId</span>=<span class="string">"zhangsan"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"username"</span> <span class="attr">data-id</span>=<span class="string">"zh-as"</span> <span class="attr">data-userId</span>=<span class="string">"lisi"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"username"</span> <span class="attr">data-id</span>=<span class="string">"zh-qq"</span> <span class="attr">data-userId</span>=<span class="string">"wangwu"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"username"</span> <span class="attr">data-id</span>=<span class="string">"zhq-er"</span> <span class="attr">data-userId</span>=<span class="string">"zhaosi"</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[功能笔记]]></title>
      <url>http://yoursite.com/2016/11/28/%E5%8A%9F%E8%83%BD%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p></p><h3 id="点击跳转到页面指定位置">1.点击跳转到页面指定位置</h3><p></p>
<p></p><h4 id="锚点方法">·锚点方法</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#jump"</span>&gt;</span>点我看看<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">“jump”</span>&gt;</span>我是该区域的相应内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<a id="more"></a>
<blockquote>
<p>该锚点法，不需要任何的js代码，即可实现跳转的方法。缺点：无过渡效果，点击链接url发生变化刷新的话会有问题。此方法貌似只能在.html后缀的页面才能起作用，对于.cshtml页面不起作用。</p>
</blockquote>
<p></p><h4 id="srollIntoView方法">·js的srollIntoView方法</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>点击本按钮，图片下面的框框1秒钟变出来<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">……</div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"block"</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="built_in">document</span>.getElementById(<span class="string">"button"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">"block"</span>).scrollIntoView();</div><div class="line">	&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p>移动端的处理，可以参见<a href="http://weibo.com/u/2330269092?is_hot=1" target="_blank" rel="external">@hacke2</a> 的这篇文章：<a href="http://www.hacke2.cn/scroll-in-uc/" target="_blank" rel="external">在移动端上使用原生滑屏解决方案</a>
<br>
扩展:    <a href="http://www.zhangxinxu.com/wordpress/2015/12/element-scroll-prevent-parent-element-scroll-js/" target="_blank" rel="external">子元素scroll父元素容器不跟随滚动JS实现</a>
<br></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[html-head内实用标签]]></title>
      <url>http://yoursite.com/2016/11/27/head%E5%86%85%E5%AE%9E%E7%94%A8%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<h3 id="移动端">移动端</h3>

<p></p><h4 id="移动端禁止缩放"> ·移动端禁止缩放</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>width：viewport的宽度;
 height：viewport的高度;<br> initial-scale：初始的缩放比例;
 minimum-scale：允许用户缩放到的最小比例;<br> maximum-scale：允许用户缩放到的最大比例;<br> user-scalable：用户是否可以手动缩放。
 有emmet插件的编辑器内简写”meta:vp”加tab键。</p>
</blockquote>
<p><br></p>
<a id="more"></a>
<p></p><h4 id="禁止字符转链接"> ·禁止字符转链接</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--&gt;不识别手机号&lt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&gt;不识别邮箱&lt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"email=no"</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p><br></p>
<p></p><h4 id="智能应用程序横幅">·智能应用程序横幅</h4>
当网站上有一个相关联的本机应用程序时，Safari浏览器可以显示一个横幅。 如果用户没有安装这个应用程序将显示“安装”按钮，或已经安装的显示“查看”按钮可打开它。
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p><br></p>
<p></p><h4 id="webApp设置"> ·webApp设置</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--&gt;开启webApp功能&lt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--&gt;全屏显示webApp&lt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-touch-fullscreen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--&gt;webApp屏幕顶部条的颜色,可选black,black-translucent,默认白色&lt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--&gt;webApp的启动图标,图片尺寸57x57,rintina:117x117,ipad:72x72，ipad ritina:144x144&lt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"webApp/appIcon57.png"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"72x72"</span> <span class="attr">href</span>=<span class="string">"webApp/appIcon72.png"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"114x114"</span> <span class="attr">href</span>=<span class="string">"webApp/appIcon114.png"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"144x144"</span> <span class="attr">href</span>=<span class="string">"webApp/appIcon144.png"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--&gt;webApp的启动界面，尺寸320x640&lt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"webApp/startup.png"</span> /&gt;</span></div></pre></td></tr></table></figure><p></p>
<p><br></p>
<h3 id="pc端">pc端</h3>

<p></p><h4 id="指定浏览器内核渲染"> ·指定浏览器内核渲染</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>使用最高版本的ie内核进行渲染。</p>
</blockquote>
<p><br></p>
<p></p><h4 id="网页标题栏icon"> ·网页标题栏icon</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"short icon"</span> <span class="attr">style</span>=<span class="string">"image/x-icon"</span> <span class="attr">href</span>=<span class="string">"logo.ico"</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<blockquote>
<p><a href="http://www.ico.la/" target="_blank" rel="external">在线ico转换工具</a></p>
</blockquote>
<p><br></p>
<p></p><h4 id="seo关键字&描述"> ·seo关键字&amp;描述</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"搜索关键词1，关键词2（5个左右）"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"网页描述文字（150字左右）"</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p><br></p>
<p></p><h4 id="判断ie版本"> ·判断ie版本</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lte IE 8]&gt;</span></div><div class="line">	do something</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>lte:小于或等于;
 lt :小于;
 gte:大于或等于;
 gt :大于;
 ! :不等于。</p>
</blockquote>
<p><br></p>
<h3 id="通用">通用</h3>

<p></p><h4 id="自动跳转刷新"> ·自动跳转刷新</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"10; url=http://www.baidu.com/"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"10"</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>10为秒数设置</p>
</blockquote>
<p><br></p>
<p></p><h4 id="去除代码缓存"> ·去除代码缓存</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p>指定过期时间
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"Wed, 20 Jun 2000 22:33:00 GMT"</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[综合面试题]]></title>
      <url>http://yoursite.com/2016/11/26/%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h4><blockquote>
<p>关键要有亮点 <br>
  很多人简历就是基本信息，然后巴拉巴拉一些不熟悉的项目，用了什么框架，自己做了什么事情，然后就没了。 <br>
  完全没有想谈谈的理由，要知道，重要的不是你做了什么，而是你做的东西带来了什么，什么地方是只有你可以做到的，或者说你比绝大数人都做的好的。比如钻研精神，刚学好的要经验没经验，要技术没技术。所以如果想寻求一份工作机会，可以 想想自己可以打动别人的亮点在哪里？</p>
</blockquote>
<h4 id="2-常用那几种浏览器测试？有哪些内核-Layout-Engine"><a href="#2-常用那几种浏览器测试？有哪些内核-Layout-Engine" class="headerlink" title="2.常用那几种浏览器测试？有哪些内核(Layout Engine)?"></a>2.常用那几种浏览器测试？有哪些内核(Layout Engine)?</h4><p>(Q1) 浏览器：IE，Chrome，FireFox，Safari，Opera（欧朋）。<br>(Q2) 内核：Trident，Gecko，Presto，Webkit。</p>
<h4 id="2-你能描述一下渐进增强和优雅降级之间的不同吗"><a href="#2-你能描述一下渐进增强和优雅降级之间的不同吗" class="headerlink" title="2.你能描述一下渐进增强和优雅降级之间的不同吗?"></a>2.你能描述一下渐进增强和优雅降级之间的不同吗?</h4><blockquote>
<p>渐进增强: 从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。 <br>
优雅降级: web站点在所有新式浏览器中都能正常工作，然后再针对低版本浏览器进行兼容，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。比如插入兼容js库。</p>
</blockquote>
<a id="more"></a>
<h4 id="3-网页验证码是干什么用的？是为了解决什么安全问题"><a href="#3-网页验证码是干什么用的？是为了解决什么安全问题" class="headerlink" title="3.网页验证码是干什么用的？是为了解决什么安全问题"></a>3.网页验证码是干什么用的？是为了解决什么安全问题</h4><blockquote>
<p>区分用户是计算机还是人的公共全自动程序。可以防止：恶意破解密码、刷票、论坛灌水； <br>
 有效防止黑客对某一个特定注册用户用特定程序通过暴力破解的方式进行不断的登录尝试</p>
</blockquote>
<h4 id="4-介绍一下你对浏览器内核的理解"><a href="#4-介绍一下你对浏览器内核的理解" class="headerlink" title="4.介绍一下你对浏览器内核的理解"></a>4.介绍一下你对浏览器内核的理解</h4><blockquote>
<p>主要分成两部分：渲染引擎和JS引擎。 <br>
（1）渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等）。 <br>
（2）JS引擎则：解析和执行javascript来实现网页的动态效果</p>
</blockquote>
<h4 id="5-性能优化"><a href="#5-性能优化" class="headerlink" title="5.性能优化"></a>5.性能优化</h4><blockquote>
<p>1.背景图片用雪碧图 <br>
  2.图像格式的选择，无透明背景用jpg，单色图标用icon-font <br>
  3.优化CSS、js文件，压缩合并   <br>
  4.不经常修改的请求文件(css,js,图片)转存到其他地方，比如七牛云存储</p>
</blockquote>
<h4 id="6-你遇到过比较难的技术问题是？你是如何解决的？"><a href="#6-你遇到过比较难的技术问题是？你是如何解决的？" class="headerlink" title="6.你遇到过比较难的技术问题是？你是如何解决的？"></a>6.你遇到过比较难的技术问题是？你是如何解决的？</h4><h4 id="7-平时有看什么书，学习资料？"><a href="#7-平时有看什么书，学习资料？" class="headerlink" title="7.平时有看什么书，学习资料？"></a>7.平时有看什么书，学习资料？</h4><blockquote>
<p>codepen,前端大全公众号,慕课网,妙味课堂 <br></p>
</blockquote>
<h4 id="8-nodejs了解么"><a href="#8-nodejs了解么" class="headerlink" title="8.nodejs了解么"></a>8.nodejs了解么</h4><blockquote>
<p>后台语言，可以用来做服务器和一些工具 <br>
  Node.js 的适用场景:高并发</p>
</blockquote>
<h4 id="9-http状态码有那些？分别代表是什么意思"><a href="#9-http状态码有那些？分别代表是什么意思" class="headerlink" title="9.http状态码有那些？分别代表是什么意思"></a>9.http状态码有那些？分别代表是什么意思</h4><blockquote>
<ul>
<li>100-199 用于指定客户端应相应的某些动作</li>
<li>200-299 用于表示请求成功</li>
<li>300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息</li>
<li>400-499 用于指出客户端的错误<ul>
<li>400：语义有误，当前请求无法被服务器理解</li>
<li>401：当前请求需要用户验证
403：服务器已经理解请求，但是拒绝执行它</li>
</ul>
</li>
<li>500-599 用于支持服务器错误<ul>
<li>503：服务不可用</li>
</ul>
</li>
</ul>
<p>重点记：2开头代表成功，4开头代表客户端请求错误，5开头代表服务器错误</p>
</blockquote>
<h4 id="10-一个页面从输入-www-baidu-com-到页面加载显示完成，这个过程中都发生了什么？"><a href="#10-一个页面从输入-www-baidu-com-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="10.一个页面从输入 www.baidu.com 到页面加载显示完成，这个过程中都发生了什么？"></a>10.一个页面从输入 www.baidu.com 到页面加载显示完成，这个过程中都发生了什么？</h4><blockquote>
<p>dns获取ip地址 -&gt; 找到ip地址 -&gt; 分割请求报文段 -&gt; 请求端口服务器 -&gt; 根据报文段返回数据 -&gt; 客户端解析响应报文段 -&gt; 解析dom -&gt; 渲染css/执行js <br>
  备注:连接服务器过程中会发生TCP三次握手和四次挥手，这个是深入的题目了。 <br></p>
<p>参考答案2,分为4个步骤：</p>
<ul>
<li>1.当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个 DNS 查询。这能使浏览器获得请求对应的 IP 地址。</li>
<li>2.浏览器与远程 Web 服务器通过 TCP 三次握手协商来建立一个 TCP/IP 连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。</li>
<li>3.一旦 TCP/IP 连接建立，浏览器会通过该连接向远程服务器发送 HTTP 的 GET 请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。</li>
<li>4.此时，Web 服务器提供资源服务，客户端开始下载资源</li>
</ul>
</blockquote>
<h4 id="11-TCP三次握手和四次挥手的全过程，为什么会采用三次握手，此题算高级题"><a href="#11-TCP三次握手和四次挥手的全过程，为什么会采用三次握手，此题算高级题" class="headerlink" title="11.TCP三次握手和四次挥手的全过程，为什么会采用三次握手，此题算高级题"></a>11.TCP三次握手和四次挥手的全过程，为什么会采用三次握手，此题算高级题</h4><blockquote>
<ul>
<li>三次握手：<ul>
<li>第一次握手：客户端发送syn包(syn=x)到服务器，并进入SYN_SEND状态，等待服务器确认；</li>
<li>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li>
<li>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。
握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。</li>
</ul>
</li>
<li>四次挥手 <br>
与建立连接的“三次握手”类似，断开一个TCP连接则需要“四次握手”。<ul>
<li>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。</li>
<li>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</li>
<li>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</li>
<li>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手</li>
</ul>
</li>
</ul>
<p>简单打法 TCP的三次握手过程：主机A向B发送连接请求；主机B对收到的主机A的报文段进行确认；主机A再次对主机B的确认进行确认。</p>
<p>为什么采用:采用三次握手是为了防止失效的连接请求报文段突然又传送到主机B，因而产生错误。失效的连接请求报文段是指：主机A发出的连接请求没有收到主机B的确认，于是经过一段时间后，主机A又重新向主机B发送连接请求，且建立成功，顺序完成数据传输。考虑这样一种特殊情况，主机A第一次发送的连接请求并没有丢失，而是因为网络节点导致延迟达到主机B，主机B以为是主机A又发起的新连接，于是主机B同意连接，并向主机A发回确认，但是此时主机A根本不会理会，主机B就一直在等待主机A发送数据，导致主机B的资源浪费</p>
</blockquote>
<h4 id="12-你用什么ide，编辑器进行开发"><a href="#12-你用什么ide，编辑器进行开发" class="headerlink" title="12.你用什么ide，编辑器进行开发"></a>12.你用什么ide，编辑器进行开发</h4><blockquote>
<p>atom,hbuilder</p>
</blockquote>
<h4 id="13-为什么要做前端"><a href="#13-为什么要做前端" class="headerlink" title="13.为什么要做前端"></a>13.为什么要做前端</h4><h4 id="14-你对加班的看法？"><a href="#14-你对加班的看法？" class="headerlink" title="14.你对加班的看法？"></a>14.你对加班的看法？</h4><h4 id="15-说说最近最流行的一些东西吧？常去哪些网站？"><a href="#15-说说最近最流行的一些东西吧？常去哪些网站？" class="headerlink" title="15.说说最近最流行的一些东西吧？常去哪些网站？"></a>15.说说最近最流行的一些东西吧？常去哪些网站？</h4><blockquote>
<p>框架 react,angular,vue</p>
</blockquote>
<h4 id="16-是否了解开源的工具-bower、npm、yeoman、grunt、gulp，一个-npm-的包里的-package-json-具备的必要的字段都有哪些？（名称、版本号，依赖）"><a href="#16-是否了解开源的工具-bower、npm、yeoman、grunt、gulp，一个-npm-的包里的-package-json-具备的必要的字段都有哪些？（名称、版本号，依赖）" class="headerlink" title="16.是否了解开源的工具 bower、npm、yeoman、grunt、gulp，一个 npm 的包里的 package.json 具备的必要的字段都有哪些？（名称、版本号，依赖）"></a>16.是否了解开源的工具 bower、npm、yeoman、grunt、gulp，一个 npm 的包里的 package.json 具备的必要的字段都有哪些？（名称、版本号，依赖）</h4><h4 id="17-会用git吗"><a href="#17-会用git吗" class="headerlink" title="17.会用git吗"></a>17.会用git吗</h4><blockquote>
<p>会使用的是可视化工具操作git，非命令行操作的不会</p>
</blockquote>
<h4 id="18-简单描述一下你做过的移动APP项目研发流程？"><a href="#18-简单描述一下你做过的移动APP项目研发流程？" class="headerlink" title="18.简单描述一下你做过的移动APP项目研发流程？"></a>18.简单描述一下你做过的移动APP项目研发流程？</h4><blockquote>
<p>拿到设计图后先思考大概的布局; <br>
  决定是否使用框架及使用什么框架; <br>
  评估哪些组件和样式可以复用; <br>
  切图新建项目开始工作</p>
</blockquote>
<h4 id="19-最近在学什么？能谈谈你未来3，5年给自己的规划吗？"><a href="#19-最近在学什么？能谈谈你未来3，5年给自己的规划吗？" class="headerlink" title="19.最近在学什么？能谈谈你未来3，5年给自己的规划吗？"></a>19.最近在学什么？能谈谈你未来3，5年给自己的规划吗？</h4><h4 id="20-你如何对网站的文件和资源进行优化？"><a href="#20-你如何对网站的文件和资源进行优化？" class="headerlink" title="20.你如何对网站的文件和资源进行优化？"></a>20.你如何对网站的文件和资源进行优化？</h4><blockquote>
<p>1.文件合并<br>
  2.文件最小化/文件压缩<br>
  3.使用 CDN 托管</p>
</blockquote>
<h4 id="21-平时如何管理你的项目？"><a href="#21-平时如何管理你的项目？" class="headerlink" title="21.平时如何管理你的项目？"></a>21.平时如何管理你的项目？</h4><blockquote>
<p>1.先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等 <br>
  2.编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）<br>
  3.标注样式编写人，各模块都及时标注（标注关键样式调用的地方）<br>
  4.页面进行标注（例如 页面 模块 开始和结束）<br>
  5.CSS 跟 HTML 分文件夹并行存放，命名都得统一（例如 style.css）<br>
  6.JS 分文件夹存放 命名以该 JS 功能为准的英文翻译</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[综合面试题]]></title>
      <url>http://yoursite.com/2016/11/26/other/</url>
      <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h4><blockquote>
<p>关键要有亮点 <br>
  很多人简历就是基本信息，然后巴拉巴拉一些不熟悉的项目，用了什么框架，自己做了什么事情，然后就没了。 <br>
  完全没有想谈谈的理由，要知道，重要的不是你做了什么，而是你做的东西带来了什么，什么地方是只有你可以做到的，或者说你比绝大数人都做的好的。比如钻研精神，刚学好的要经验没经验，要技术没技术。所以如果想寻求一份工作机会，可以 想想自己可以打动别人的亮点在哪里？</p>
</blockquote>
<h4 id="2-你能描述一下渐进增强和优雅降级之间的不同吗"><a href="#2-你能描述一下渐进增强和优雅降级之间的不同吗" class="headerlink" title="2.你能描述一下渐进增强和优雅降级之间的不同吗?"></a>2.你能描述一下渐进增强和优雅降级之间的不同吗?</h4><blockquote>
<p>渐进增强: 项目针对低版本浏览器进行开发，保证最基本的功能可用。再针对高级浏览器进行效果、交互等改进。如css动画 <br>
优雅降级: 一开始就构建完整的功能，然后再针对低版本浏览器进行兼容，比如插入兼容js库。</p>
</blockquote>
<a id="more"></a>
<h4 id="3-网页验证码是干什么用的？是为了解决什么安全问题"><a href="#3-网页验证码是干什么用的？是为了解决什么安全问题" class="headerlink" title="3.网页验证码是干什么用的？是为了解决什么安全问题"></a>3.网页验证码是干什么用的？是为了解决什么安全问题</h4><blockquote>
<p>区分用户是计算机还是人的公共全自动程序。可以防止：恶意破解密码、刷票、论坛灌水； <br>
 有效防止黑客对某一个特定注册用户用特定程序通过暴力破解的方式进行不断的登录尝试</p>
</blockquote>
<h4 id="4-介绍一下你对浏览器内核的理解"><a href="#4-介绍一下你对浏览器内核的理解" class="headerlink" title="4.介绍一下你对浏览器内核的理解"></a>4.介绍一下你对浏览器内核的理解</h4><blockquote>
<p>主要分成两部分：渲染引擎和JS引擎。 <br>
（1）渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等）。 <br>
（2）JS引擎则：解析和执行javascript来实现网页的动态效果</p>
</blockquote>
<h4 id="5-性能优化"><a href="#5-性能优化" class="headerlink" title="5.性能优化"></a>5.性能优化</h4><blockquote>
<p>1.背景图片用雪碧图 <br>
  2.图像格式的选择，无透明背景用jpg，单色图标用icon-font <br>
  3.优化CSS、js文件，压缩合并   <br>
  4.不经常修改的请求文件(css,js,图片)转存到其他地方，比如七牛云存储</p>
</blockquote>
<h4 id="6-你遇到过比较难的技术问题是？你是如何解决的？"><a href="#6-你遇到过比较难的技术问题是？你是如何解决的？" class="headerlink" title="6.你遇到过比较难的技术问题是？你是如何解决的？"></a>6.你遇到过比较难的技术问题是？你是如何解决的？</h4><h4 id="7-平时有看什么书，学习资料？"><a href="#7-平时有看什么书，学习资料？" class="headerlink" title="7.平时有看什么书，学习资料？"></a>7.平时有看什么书，学习资料？</h4><blockquote>
<p>codepen,前端大全公众号,慕课网,妙味课堂 <br></p>
</blockquote>
<h4 id="8-nodejs了解么"><a href="#8-nodejs了解么" class="headerlink" title="8.nodejs了解么"></a>8.nodejs了解么</h4><blockquote>
<p>后台语言，可以用来做服务器和一些工具 <br>
  Node.js 的适用场景:高并发</p>
</blockquote>
<h4 id="9-http状态码有那些？分别代表是什么意思"><a href="#9-http状态码有那些？分别代表是什么意思" class="headerlink" title="9.http状态码有那些？分别代表是什么意思"></a>9.http状态码有那些？分别代表是什么意思</h4><blockquote>
<ul>
<li>100-199 用于指定客户端应相应的某些动作</li>
<li>200-299 用于表示请求成功</li>
<li>300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息</li>
<li>400-499 用于指出客户端的错误<ul>
<li>400：语义有误，当前请求无法被服务器理解</li>
<li>401：当前请求需要用户验证
403：服务器已经理解请求，但是拒绝执行它</li>
</ul>
</li>
<li>500-599 用于支持服务器错误<ul>
<li>503：服务不可用</li>
</ul>
</li>
</ul>
<p>重点记：2开头代表成功，4开头代表客户端请求错误，5开头代表服务器错误</p>
</blockquote>
<h4 id="10-一个页面从输入-www-baidu-com-到页面加载显示完成，这个过程中都发生了什么？"><a href="#10-一个页面从输入-www-baidu-com-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="10.一个页面从输入 www.baidu.com 到页面加载显示完成，这个过程中都发生了什么？"></a>10.一个页面从输入 www.baidu.com 到页面加载显示完成，这个过程中都发生了什么？</h4><blockquote>
<p>dns获取ip地址 -&gt; 找到ip地址 -&gt; 分割请求报文段 -&gt; 请求端口服务器 -&gt; 根据报文段返回数据 -&gt; 客户端解析响应报文段 -&gt; 解析dom -&gt; 渲染css/执行js <br>
  备注:连接服务器过程中会发生TCP三次握手和四次挥手，这个是深入的题目了。 <br></p>
<p>参考答案2,分为4个步骤：</p>
<ul>
<li>1.当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个 DNS 查询。这能使浏览器获得请求对应的 IP 地址。</li>
<li>2.浏览器与远程 Web 服务器通过 TCP 三次握手协商来建立一个 TCP/IP 连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。</li>
<li>3.一旦 TCP/IP 连接建立，浏览器会通过该连接向远程服务器发送 HTTP 的 GET 请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。</li>
<li>4.此时，Web 服务器提供资源服务，客户端开始下载资源</li>
</ul>
</blockquote>
<h4 id="11-TCP三次握手和四次挥手的全过程，为什么会采用三次握手，此题算高级题"><a href="#11-TCP三次握手和四次挥手的全过程，为什么会采用三次握手，此题算高级题" class="headerlink" title="11.TCP三次握手和四次挥手的全过程，为什么会采用三次握手，此题算高级题"></a>11.TCP三次握手和四次挥手的全过程，为什么会采用三次握手，此题算高级题</h4><blockquote>
<ul>
<li>三次握手：<ul>
<li>第一次握手：客户端发送syn包(syn=x)到服务器，并进入SYN_SEND状态，等待服务器确认；</li>
<li>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li>
<li>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。
握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。</li>
</ul>
</li>
<li>四次挥手 <br>
与建立连接的“三次握手”类似，断开一个TCP连接则需要“四次握手”。<ul>
<li>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。</li>
<li>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</li>
<li>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</li>
<li>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手</li>
</ul>
</li>
</ul>
<p>简单打法 TCP的三次握手过程：主机A向B发送连接请求；主机B对收到的主机A的报文段进行确认；主机A再次对主机B的确认进行确认。</p>
<p>为什么采用:采用三次握手是为了防止失效的连接请求报文段突然又传送到主机B，因而产生错误。失效的连接请求报文段是指：主机A发出的连接请求没有收到主机B的确认，于是经过一段时间后，主机A又重新向主机B发送连接请求，且建立成功，顺序完成数据传输。考虑这样一种特殊情况，主机A第一次发送的连接请求并没有丢失，而是因为网络节点导致延迟达到主机B，主机B以为是主机A又发起的新连接，于是主机B同意连接，并向主机A发回确认，但是此时主机A根本不会理会，主机B就一直在等待主机A发送数据，导致主机B的资源浪费</p>
</blockquote>
<h4 id="12-你用什么ide，编辑器进行开发"><a href="#12-你用什么ide，编辑器进行开发" class="headerlink" title="12.你用什么ide，编辑器进行开发"></a>12.你用什么ide，编辑器进行开发</h4><blockquote>
<p>atom,hbuilder</p>
</blockquote>
<h4 id="13-为什么要做前端"><a href="#13-为什么要做前端" class="headerlink" title="13.为什么要做前端"></a>13.为什么要做前端</h4><h4 id="14-你对加班的看法？"><a href="#14-你对加班的看法？" class="headerlink" title="14.你对加班的看法？"></a>14.你对加班的看法？</h4><h4 id="15-说说最近最流行的一些东西吧？常去哪些网站？"><a href="#15-说说最近最流行的一些东西吧？常去哪些网站？" class="headerlink" title="15.说说最近最流行的一些东西吧？常去哪些网站？"></a>15.说说最近最流行的一些东西吧？常去哪些网站？</h4><blockquote>
<p>框架 react,angular,vue</p>
</blockquote>
<h4 id="16-是否了解开源的工具-bower、npm、yeoman、grunt、gulp，一个-npm-的包里的-package-json-具备的必要的字段都有哪些？（名称、版本号，依赖）"><a href="#16-是否了解开源的工具-bower、npm、yeoman、grunt、gulp，一个-npm-的包里的-package-json-具备的必要的字段都有哪些？（名称、版本号，依赖）" class="headerlink" title="16.是否了解开源的工具 bower、npm、yeoman、grunt、gulp，一个 npm 的包里的 package.json 具备的必要的字段都有哪些？（名称、版本号，依赖）"></a>16.是否了解开源的工具 bower、npm、yeoman、grunt、gulp，一个 npm 的包里的 package.json 具备的必要的字段都有哪些？（名称、版本号，依赖）</h4><h4 id="17-会用git吗"><a href="#17-会用git吗" class="headerlink" title="17.会用git吗"></a>17.会用git吗</h4><blockquote>
<p>会使用的是可视化工具操作git，非命令行操作的不会</p>
</blockquote>
<h4 id="18-简单描述一下你做过的移动APP项目研发流程？"><a href="#18-简单描述一下你做过的移动APP项目研发流程？" class="headerlink" title="18.简单描述一下你做过的移动APP项目研发流程？"></a>18.简单描述一下你做过的移动APP项目研发流程？</h4><blockquote>
<p>拿到设计图后先思考大概的布局; <br>
  决定是否使用框架及使用什么框架; <br>
  评估哪些组件和样式可以复用; <br>
  切图新建项目开始工作</p>
</blockquote>
<h4 id="19-最近在学什么？能谈谈你未来3，5年给自己的规划吗？"><a href="#19-最近在学什么？能谈谈你未来3，5年给自己的规划吗？" class="headerlink" title="19.最近在学什么？能谈谈你未来3，5年给自己的规划吗？"></a>19.最近在学什么？能谈谈你未来3，5年给自己的规划吗？</h4><h4 id="20-你如何对网站的文件和资源进行优化？"><a href="#20-你如何对网站的文件和资源进行优化？" class="headerlink" title="20.你如何对网站的文件和资源进行优化？"></a>20.你如何对网站的文件和资源进行优化？</h4><blockquote>
<p>1.文件合并<br>
  2.文件最小化/文件压缩<br>
  3.使用 CDN 托管</p>
</blockquote>
<h4 id="21-平时如何管理你的项目？"><a href="#21-平时如何管理你的项目？" class="headerlink" title="21.平时如何管理你的项目？"></a>21.平时如何管理你的项目？</h4><blockquote>
<p>1.先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等 <br>
  2.编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）<br>
  3.标注样式编写人，各模块都及时标注（标注关键样式调用的地方）<br>
  4.页面进行标注（例如 页面 模块 开始和结束）<br>
  5.CSS 跟 HTML 分文件夹并行存放，命名都得统一（例如 style.css）<br>
  6.JS 分文件夹存放 命名以该 JS 功能为准的英文翻译</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js面试题]]></title>
      <url>http://yoursite.com/2016/11/25/js/</url>
      <content type="html"><![CDATA[<h4 id="1-给网页添加javascript的方式有"><a href="#1-给网页添加javascript的方式有" class="headerlink" title="1.给网页添加javascript的方式有"></a>1.给网页添加javascript的方式有</h4><blockquote>
<p>使用script标签，将javascript代码写到<code>&lt;script&gt;&lt;/script&gt;</code>之间 <br>
  添加外部javascript文件 <code>&lt;script src=&quot;x.js&quot;&gt;</code> <br>
  使用行内javascript  <code>&lt;div onclick=&quot;a()&quot;&gt;&lt;/div&gt;</code></p>
</blockquote>
<h4 id="2-js延迟加载的方式有哪些？"><a href="#2-js延迟加载的方式有哪些？" class="headerlink" title="2.js延迟加载的方式有哪些？"></a>2.js延迟加载的方式有哪些？</h4><blockquote>
<ol>
<li><code>&lt;script src=&quot;xx.js&quot; defer=&quot;defer&quot;&gt;</code></li>
<li>动态创建DOM方式（js创建script标签插入到DOM中）</li>
</ol>
</blockquote>
<h4 id="3-介绍一下-JS-的基本数据类型。"><a href="#3-介绍一下-JS-的基本数据类型。" class="headerlink" title="3.介绍一下 JS 的基本数据类型。"></a>3.介绍一下 JS 的基本数据类型。</h4><blockquote>
<p>Undefined、Null、Boolean、Number、String、Object</p>
</blockquote>
<h4 id="4-介绍一下-JS-有哪些内置对象。"><a href="#4-介绍一下-JS-有哪些内置对象。" class="headerlink" title="4.介绍一下 JS 有哪些内置对象。"></a>4.介绍一下 JS 有哪些内置对象。</h4><blockquote>
<p>数据封装类对象：Object、Array、Boolean、Number、String <br>
  其他对象：Function、Argument、Math、Date、RegExp、Error</p>
</blockquote>
<a id="more"></a>
<h4 id="5-说几条写JavaScript的基本规范？"><a href="#5-说几条写JavaScript的基本规范？" class="headerlink" title="5.说几条写JavaScript的基本规范？"></a>5.说几条写JavaScript的基本规范？</h4><blockquote>
<p>（1）不要在同一行声明多个变量 <br>
  （2）如果你不知道数组的长度，使用 push <br>
  （3）请使用 ===/!== 来比较 true/false 或者数值 <br>
  （4）对字符串使用单引号 ‘’(因为大多时候我们的字符串。特别html会出现”) <br>
  （5）使用对象字面量替代 new Array 这种形式 <br>
  （6）绝对不要在一个非函数块里声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但是它们解析不同 <br>
  （7）不要使用全局函数 <br>
  （8）总是使用 var 来声明变量，如果不这么做将导致产生全局变量，我们要避免污染全局命名空间 <br>
  （9）Switch 语句必须带有 default 分支 <br>
  （10）使用 <code>/*...*/</code> 进行多行注释，包括描述，指定类型以及参数值和返回值 <br>
  （11）函数不应该有时候有返回值，有时候没有返回值 <br>
  （12）语句结束一定要加分号 <br>
  （13）for 循环必须使用大括号 <br>
  （14）if 语句必须使用大括号 <br>
  （15）for-in 循环中的变量应该使用 var 关键字明确限定作用域，从而避免作用域污染 <br>
  （16）避免单个字符名，让你的变量名有描述意义 <br>
  （17）当命名对象、函数和实例时使用驼峰命名规则 <br>
  （18）给对象原型分配方法，而不是用一个新的对象覆盖原型，覆盖原型会使继承出现问题 <br>
  （19）当给事件附加数据时，传入一个哈希而不是原始值，这可以让后面的贡献者加入更多数据到事件数据里，而不用找出并更新那个事件的事件处理器</p>
</blockquote>
<h4 id="6-对JSON-的了解？"><a href="#6-对JSON-的了解？" class="headerlink" title="6.对JSON 的了解？"></a>6.对JSON 的了解？</h4><blockquote>
<p>JSON是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"age"</span>:<span class="string">"18"</span>, <span class="attr">"name"</span>:<span class="string">"cc"</span>&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="7-documen-write和-innerHTML-的区别"><a href="#7-documen-write和-innerHTML-的区别" class="headerlink" title="7.documen.write和 innerHTML 的区别"></a>7.documen.write和 innerHTML 的区别</h4><blockquote>
<p>document.write 只能重绘整个页面 <br>
  innerHTML 可以重绘页面的一部分</p>
</blockquote>
<h4 id="8-new操作符具体干了什么呢"><a href="#8-new操作符具体干了什么呢" class="headerlink" title="8.new操作符具体干了什么呢?"></a>8.new操作符具体干了什么呢?</h4><blockquote>
<p>1.创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型 <br>
  2.属性和方法被加入到 this 引用的对象中 <br>
  3.新创建的对象由 this 所引用，并且最后隐式的返回 this
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代码表示</span></div><div class="line"><span class="keyword">var</span> obj  = &#123;&#125;;</div><div class="line">obj.__proto__ = Base.prototype;</div><div class="line">Base.call(obj);</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="9-null和undefined的区别？"><a href="#9-null和undefined的区别？" class="headerlink" title="9.null和undefined的区别？"></a>9.null和undefined的区别？</h4><blockquote>
<p>null是一个表示”无”的对象，转为数值时为0 <br>
  undefined是一个表示”无”的原始值，转为数值时为NaN<br>
当声明的变量还未被初始化时，变量的默认值为undefined，表示有但未定义 <br>
  null用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象</p>
</blockquote>
<h4 id="10-哪些操作会造成内存泄漏？"><a href="#10-哪些操作会造成内存泄漏？" class="headerlink" title="10.哪些操作会造成内存泄漏？"></a>10.哪些操作会造成内存泄漏？</h4><blockquote>
<p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>
  垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。<br>
1.setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。<br>
  2.闭包<br>
  3.控制台日志 (此条不明)<br>
  4.循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p>
</blockquote>
<h4 id="11-ajax-的过程是怎样的"><a href="#11-ajax-的过程是怎样的" class="headerlink" title="11.ajax 的过程是怎样的"></a>11.ajax 的过程是怎样的</h4><blockquote>
<p>1.创建XMLHttpRequest对象,也就是创建一个异步调用对象 <br>
  2.创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息 <br>
  3.设置响应HTTP请求状态变化的函数 <br>
  4.发送HTTP请求 <br>
  5.获取异步调用返回的数据 <br>
  6.使用JavaScript和DOM实现局部刷新</p>
</blockquote>
<h4 id="12-什么是-“use-strict”-使用它的好处和坏处分别是什么"><a href="#12-什么是-“use-strict”-使用它的好处和坏处分别是什么" class="headerlink" title="12.什么是 “use strict”; ? 使用它的好处和坏处分别是什么"></a>12.什么是 “use strict”; ? 使用它的好处和坏处分别是什么</h4><blockquote>
<ul>
<li>设立”严格模式”的目的，主要有以下几个：<ul>
<li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li>
<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>
<li>提高编译器效率，增加运行速度；</li>
<li>为未来新版本的Javascript做好铺垫。<br></li>
</ul>
</li>
</ul>
<p>注：经过测试 IE6,7,8,9 均不支持严格模式。</p>
</blockquote>
<h4 id="13-Ajax是什么？"><a href="#13-Ajax是什么？" class="headerlink" title="13.Ajax是什么？"></a>13.Ajax是什么？</h4><blockquote>
<ul>
<li>Ajax 是什么：<ul>
<li>通过异步模式，提升了用户体验</li>
<li>优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用</li>
<li>Ajax 在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</li>
</ul>
</li>
<li>Ajax 的最大的特点：<ul>
<li>Ajax可以实现动态不刷新（局部刷新）</li>
<li>readyState 属性 状态 有5个可取值： 0 = 未初始化，1 = 启动， 2 = 发送，3 = 接收，4 = 完成</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="14-JavaScript-原型，原型链-有什么特点？"><a href="#14-JavaScript-原型，原型链-有什么特点？" class="headerlink" title="14.JavaScript 原型，原型链 ? 有什么特点？"></a>14.JavaScript 原型，原型链 ? 有什么特点？</h4><blockquote>
<ul>
<li>原型对象也是普通的对象，是对象一个自带隐式的 <code>__proto__</code> 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为 null 的话，我们就称之为原型链</li>
<li>原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链 <br></li>
<li>每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去，也就是我们平时所说的原型链的概念。<br></li>
<li>关系：<code>instance.constructor.prototype = instance.__proto__</code><br></li>
<li>特点：JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本，当我们修改原型时，与之相关的对象也会继承这一改变。<br></li>
<li>当我们需要一个属性时，JavaScript引擎会先看当前对象中是否有这个属性，如果没有的话，就会查找它的prototype对象是否有这个属性，如此递推下去，一致检索到Object内建对象。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Func.prototype.name = <span class="string">"Xiaosong"</span>;</div><div class="line">Func.prototype.getInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Func();</div><div class="line"><span class="built_in">console</span>.log(person.getInfo());</div><div class="line"><span class="comment">//"Xiaosong"</span></div><div class="line"><span class="built_in">console</span>.log(Func.prototype);</div><div class="line"><span class="comment">//Func &#123; name = "Xiaosong", getInfo = function() &#125;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="15-eval-是做什么的？"><a href="#15-eval-是做什么的？" class="headerlink" title="15.eval 是做什么的？"></a>15.eval 是做什么的？</h4><blockquote>
<p>它的功能是把对应的字符串解析成JS代码并运行；
  应该避免使用eval，因为不安全，非常耗性能（2次，一次解析成js语句，一次执行）。</p>
</blockquote>
<h4 id="16-什么是闭包-closure-，为什么要用它？"><a href="#16-什么是闭包-closure-，为什么要用它？" class="headerlink" title="16.什么是闭包(closure)，为什么要用它？"></a>16.什么是闭包(closure)，为什么要用它？</h4><blockquote>
<p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量，利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。<br></p>
<ul>
<li>闭包特性：<ul>
<li>函数内再嵌套函数</li>
<li>内部函数可以引用外层的参数和变量</li>
<li>参数和变量不会被垃圾回收机制回收<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span> index = 0 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span> index = 1 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span> index = 2 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span> index = 3 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;nodes.length;i+=<span class="number">1</span>) &#123;</div><div class="line">      nodes[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(i+<span class="number">1</span>); <span class="comment">//不使用闭包的话，值每次都是4</span></div><div class="line">      &#125;(<span class="number">4</span>);</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="17-DOM-操作——怎样添加、移除、移动、复制、创建和查找节点"><a href="#17-DOM-操作——怎样添加、移除、移动、复制、创建和查找节点" class="headerlink" title="17.DOM 操作——怎样添加、移除、移动、复制、创建和查找节点"></a>17.DOM 操作——怎样添加、移除、移动、复制、创建和查找节点</h4><blockquote>
<ul>
<li>(1)创建新节点<ul>
<li>createDocumentFragment()    //创建一个DOM片段</li>
<li>createElement()   //创建一个具体的元素</li>
<li>createTextNode()   //创建一个文本节点</li>
</ul>
</li>
<li>(2)添加、移除、替换、插入<ul>
<li>appendChild()</li>
<li>removeChild()</li>
<li>replaceChild()</li>
<li>insertBefore() //在已有的子节点前插入一个新的子节点</li>
</ul>
</li>
<li>(3)查找<ul>
<li>getElementsByTagName()    //通过标签名称</li>
<li>getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</li>
<li>getElementById()    //通过元素Id，唯一性</li>
</ul>
</li>
</ul>
</blockquote>
<hr>
<h1 id="jquery题"><a href="#jquery题" class="headerlink" title="jquery题"></a>jquery题</h1><h4 id="1-在jquery中想要实现通过远程http-get请求载入信息功能用什么方法？-如何请求ajax？"><a href="#1-在jquery中想要实现通过远程http-get请求载入信息功能用什么方法？-如何请求ajax？" class="headerlink" title="1.在jquery中想要实现通过远程http get请求载入信息功能用什么方法？/ 如何请求ajax？"></a>1.在jquery中想要实现通过远程http get请求载入信息功能用什么方法？/ 如何请求ajax？</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;                <span class="comment">// jquery封装的ajax请求方式</span></div><div class="line">  url: <span class="string">"地址url"</span>,        <span class="comment">// 填入请求的地址参数</span></div><div class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 如果请求成功执行...</span></div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<h1 id="高级题"><a href="#高级题" class="headerlink" title="高级题"></a>高级题</h1><h4 id="1-如何解决跨域问题"><a href="#1-如何解决跨域问题" class="headerlink" title="1.如何解决跨域问题?"></a>1.如何解决跨域问题?</h4><h4 id="2-javascript对象的几种创建方式"><a href="#2-javascript对象的几种创建方式" class="headerlink" title="2.javascript对象的几种创建方式"></a>2.javascript对象的几种创建方式</h4><blockquote>
<p>1.工厂模式 <br>
  2.构造函数模式 <br>
  3.原型模式 <br>
  4.混合构造函数和原型模式 <br>
  5.动态原型模式 <br>
  6.寄生构造函数模式 <br>
  7.稳妥构造函数模式 <br>
  参考笔记 2.0</p>
</blockquote>
<h4 id="3-javascript继承的-6-种方法-这题我也不懂"><a href="#3-javascript继承的-6-种方法-这题我也不懂" class="headerlink" title="3.javascript继承的 6 种方法 (这题我也不懂)"></a>3.javascript继承的 6 种方法 (这题我也不懂)</h4><blockquote>
<p>1.原型链继承<br>
  2.借用构造函数继承<br>
  3.组合继承(原型+借用构造)<br>
  4.原型式继承<br>
  5.寄生式继承<br>
  6.寄生组合式继承<br>
(1)构造继承<br>
  (2)原型继承<br>
  (3)实例继承<br>
  (4)拷贝继承
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'song'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.age = <span class="number">28</span>;</div><div class="line">&#125;</div><div class="line">Child.prototype = <span class="keyword">new</span> Parent(); <span class="comment">//通过原型,继承了Parent</span></div><div class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Child()l;</div><div class="line">alert(demo.age);</div><div class="line">alert(demo.name); <span class="comment">//得到被继承的属性</span></div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[各类标签实用代码]]></title>
      <url>http://yoursite.com/2016/10/12/%E5%90%84%E7%B1%BB%E6%A0%87%E7%AD%BE%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="html5标签">1.html5标签</h3>
<h4 id="语义化标签">·语义化标签</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">title</span>=<span class="string">"头部"</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">title</span>=<span class="string">"菜单"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">nav</span> <span class="attr">title</span>=<span class="string">"标题"</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">article</span> <span class="attr">title</span>=<span class="string">"文章"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">section</span> <span class="attr">title</span>=<span class="string">"章节"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">hgroup</span> <span class="attr">title</span>=<span class="string">"标题组"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">aside</span> <span class="attr">title</span>=<span class="string">"文章侧栏"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">figure</span> <span class="attr">title</span>=<span class="string">"图像组合"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">figcaption</span> <span class="attr">title</span>=<span class="string">"图像标题"</span>&gt;</span><span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">img</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">title</span>=<span class="string">"底部"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div></pre></td></tr></table></figure>

<br>

<a id="more"></a>

<h3 id="input标签">2.input标签</h3>
<h4 id="input类型date不支持placeholder">·input类型date不支持placeholder</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Date"</span> <span class="attr">class</span>=<span class="string">"textbox-n"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">onfocus</span>=<span class="string">"(this.type='date')"</span>  <span class="attr">id</span>=<span class="string">"date"</span>&gt;</span></div></pre></td></tr></table></figure>

<br>

<h4 id="移动端拍照上传">·移动端拍照上传</h4>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">accept</span>=<span class="string">"video/*"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></div></pre></td></tr></table></figure>

<br>

<h4 id="input输入框优化">·input输入框优化</h4>
<table>
    <tbody>
        <tr>
            <td>git config –global user.name “Your Name”</td>
            <td>设置用户名</td>
        </tr>
        <tr width="100%">
            <td>git config –global user.email “email@example.com”</td>
            <td>设置邮箱</td>
        </tr>
    </tbody>
</table>
<br>

<h4 id="创建版本库">·创建版本库</h4>
<table>
    <thead>
        <tr>
            <th>属性值</th>
            <th>输入框描述</th>
        </tr>
    
    <tbody>
        <tr>
            <td>email，url</td>
            <td>网址，email类输入</td>
        </tr>
        <tr>
            <td>number，tel</td>
            <td>数字类输入</td>
        </tr>
        <tr>
            <td>search</td>
            <td>搜索类输入</td>
        </tr>
        <tr>
            <td>reset</td>
            <td>重置按钮</td>
        </tr>
        <tr>
            <td>color</td>
            <td>拾色器</td>
        </tr>
    </tbody>
</thead></table>
<br>

<h3 id="其他标签">3.其他标签</h3>

<p></p><h4 id="a标签active伪类生效">·a标签active伪类生效</h4>
给a链接的touch系列的任意事件touchstart/touchend绑定一个空的匿名方法即可hack成功
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: <span class="number">#000</span>; &#125;</div><div class="line">	<span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123; <span class="attribute">color</span>: <span class="number">#fff</span>; &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> a = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line">		a[i].addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="literal">false</span>);</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端常用网站]]></title>
      <url>http://yoursite.com/2016/08/27/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<p></p><h3 id="常用站点">常用站点</h3><p></p>
<p></p><h4 id="社区问答">社区问答</h4><p></p>
<table>
    <tbody>
        <tr>
            <td><a href="http://codepen.io/" target="_blank" rel="external">codepen</a></td>
            <td>前端各类代码展示</td>
        </tr>
        <tr>
            <td><a href="http://stackoverflow.com/" target="_blank" rel="external">stackoverflow</a></td>
            <td>国外综合问答论坛</td>
        </tr>
        <tr>
            <td><a href="https://segmentfault.com/" target="_blank" rel="external">segmentfault</a></td>
            <td>国内综合问答论坛</td>
        </tr>
    </tbody>
</table>
<br>
<a id="more"></a>
<h4 id="前端期刊">前端期刊</h4>
<table>
    <tbody>
        <tr>
            <td><a href="http://www.75team.com/weekly/" target="_blank" rel="external">360齐舞周刊</a></td>
            <td>每周5下午更新前端精华文章</td>
        </tr>
        <tr>
            <td><a href="http://fex.baidu.com/" target="_blank" rel="external">百度FEX</a></td>
            <td>每周1更新前端精华文章</td>
        </tr>
    </tbody>
</table>
<br>

<h4 id="设计素材">设计素材</h4>
<table>
    <tbody>
        <tr>
            <td><a href="http://90sheji.com/" target="_blank" rel="external">90设计</a></td>
            <td>电商素材</td>
        </tr>
        <tr>
            <td><a href="http://www.apkui.com/" target="_blank" rel="external">android UI</a></td>
            <td>移动端设计集合</td>
        </tr>
        <tr>
            <td><a href="http://subtlepatterns.com/" target="_blank" rel="external">subtlepatterns</a></td>
            <td>可循环的背景素材</td>
        </tr>
        <tr>
            <td><a href="http://www.iconfont.cn/" target="_blank" rel="external">iconfont</a></td>
            <td>icon素材</td>
        </tr>
        <tr>
            <td><a href="http://freemusicarchive.org/" target="_blank" rel="external">FMA</a></td>
            <td>免费音乐素材</td>
        </tr>
        <tr>
            <td><a href="https://pixabay.com/" target="_blank" rel="external">pixabay</a></td>
            <td>免费高清图片素材</td>
        </tr>
        <tr>
            <td><a href="http://www.lolcolors.com/" target="_blank" rel="external">lolcolors</a></td>
            <td>比较养眼的配色集合</td>
        </tr>
        <tr>
            <td><a href="http://www.pixiv.net/" target="_blank" rel="external">pixiv</a></td>
            <td>漫画素材(注意版权)</td>
        </tr>
        <tr>
            <td><a href="http://www.fontsquirrel.com/" target="_blank" rel="external">松鼠字体</a></td>
            <td>免费可商用英文字体</td>
        </tr>
    </tbody>
</table>
<br>

<h4 id="前端工具">前端工具</h4>
<table>
    <tbody>
        <tr>
            <td><a href="http://hefangshi.github.io/1px.html" target="_blank" rel="external">1像素背景生成器</a></td>
            <td>ios设备1像素边框快速生成图片</td>
        </tr>
        <tr>
            <td><a href="https://tinypng.com/" target="_blank" rel="external">tinypng</a></td>
            <td>图片在线压缩</td>
        </tr>
        <tr>
            <td><a href="http://www.liantu.com/" target="_blank" rel="external">联图网</a></td>
            <td>二维码生成器</td>
        </tr>
    </tbody>
</table>
<br>

<h3 id="导航集合">导航集合</h3>
<table>
    <tbody>
        <tr>
            <td><a href="http://www.daqianduan.com/nav" target="_blank" rel="external">大前端</a></td>
            <td>前端网址导航</td>
        </tr>
        <tr>
            <td><a href="http://div.io/digg" target="_blank" rel="external">div.io</a></td>
            <td>前端工具集</td>
        </tr>
        <tr>
            <td><a href="https://www.awesomes.cn/" target="_blank" rel="external">awesomes</a></td>
            <td>前端资源库</td>
        </tr>
        <tr>
            <td><a href="http://hao.uisdc.com/" target="_blank" rel="external">设计师网址导航</a></td>
            <td>设计师网址导航</td>
        </tr>
        <tr>
            <td><a href="http://www.kancloud.cn/jikeytang/qq/81129" target="_blank" rel="external">前端大全</a></td>
            <td>前端大全</td>
        </tr>
        <tr>
            <td><a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills" target="_blank" rel="external">前端兼容工具集</a></td>
            <td>各类浏览器对新属性支持的解决方案</td>
        </tr>
    </tbody>
</table>
]]></content>
    </entry>
    
  
  
</search>
